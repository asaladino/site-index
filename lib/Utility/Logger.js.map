{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["winston","Args","join","writeFileSync","existsSync","mkdirSync","Logger","constructor","args","logsPath","getLogsPath","logger","createLogger","level","format","json","transports","File","filename","save","state","Promise","resolve","file","JSON","stringify","info","log","report","logsPathBase","getProjectPath"],"mappings":"AACA,OAAOA,OAAP,MAAoB,SAApB;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,SAAQC,IAAR,QAAmB,MAAnB;AACA,SAAQC,aAAR,EAAuBC,UAAvB,EAAmCC,SAAnC,QAAmD,IAAnD;AAEA,eAAe,MAAMC,MAAN,CAAa;AAKxBC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,KAAKC,WAAL,EAAhB;AACA,SAAKC,MAAL,GAAcX,OAAO,CAACY,YAAR,CAAqB;AAC/BC,MAAAA,KAAK,EAAE,MADwB;AAE/BC,MAAAA,MAAM,EAAEd,OAAO,CAACc,MAAR,CAAeC,IAAf,EAFuB;AAG/BC,MAAAA,UAAU,EAAE,CACR,IAAIhB,OAAO,CAACgB,UAAR,CAAmBC,IAAvB,CAA4B;AAACC,QAAAA,QAAQ,EAAEhB,IAAI,CAAC,KAAKO,QAAN,EAAgB,cAAhB;AAAf,OAA5B,CADQ;AAHmB,KAArB,CAAd;AAOH;;AAEDU,EAAAA,IAAI,CAACC,KAAD,EAA2B;AAC3B,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1B,UAAIC,IAAI,GAAGrB,IAAI,CAAC,KAAKO,QAAN,EAAgB,YAAhB,CAAf;AACAN,MAAAA,aAAa,CAACoB,IAAD,EAAOC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAP,CAAb;AACAE,MAAAA,OAAO;AACV,KAJM,CAAP;AAKH;;AAEDI,EAAAA,IAAI,CAACN,KAAD,EAAa;AACb,SAAKT,MAAL,CAAYgB,GAAZ,CAAgB,MAAhB,EAAwBH,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAxB;AACH;;AAEDQ,EAAAA,MAAM,CAACR,KAAD,EAAa;AACf,SAAKD,IAAL,CAAUC,KAAV;AACA,SAAKM,IAAL,CAAUN,KAAV;AACH;;AAEDV,EAAAA,WAAW,GAAW;AAClB,QAAImB,YAAY,GAAG3B,IAAI,CAAC,KAAKM,IAAL,CAAUsB,cAAV,EAAD,EAA6B,MAA7B,CAAvB;;AACA,QAAI,CAAC1B,UAAU,CAACyB,YAAD,CAAf,EAA+B;AAC3BxB,MAAAA,SAAS,CAACwB,YAAD,CAAT;AACH;;AAED,QAAIpB,QAAQ,GAAGP,IAAI,CAAC,KAAKM,IAAL,CAAUsB,cAAV,EAAD,EAA6B,MAA7B,EAAqC,OAArC,CAAnB;;AACA,QAAI,CAAC1B,UAAU,CAACK,QAAD,CAAf,EAA2B;AACvBJ,MAAAA,SAAS,CAACI,QAAD,CAAT;AACH;;AACD,WAAOA,QAAP;AACH;;AA7CuB","sourcesContent":["// @flow\nimport winston from 'winston';\nimport Args from \"../Model/Args.js\";\nimport {join} from \"path\";\nimport {writeFileSync, existsSync, mkdirSync} from \"fs\";\n\nexport default class Logger {\n    args: Args;\n    logsPath: string;\n    logger: any;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logsPath = this.getLogsPath();\n        this.logger = winston.createLogger({\n            level: \"info\",\n            format: winston.format.json(),\n            transports: [\n                new winston.transports.File({filename: join(this.logsPath, \"last_run.log\")})\n            ]\n        });\n    }\n\n    save(state: any): Promise<any> {\n        return new Promise(resolve => {\n            let file = join(this.logsPath, \"state.json\");\n            writeFileSync(file, JSON.stringify(state));\n            resolve();\n        });\n    }\n\n    info(state: any) {\n        this.logger.log(\"info\", JSON.stringify(state));\n    }\n\n    report(state: any) {\n        this.save(state);\n        this.info(state);\n    }\n\n    getLogsPath(): string {\n        let logsPathBase = join(this.args.getProjectPath(), \"logs\");\n        if (!existsSync(logsPathBase)) {\n            mkdirSync(logsPathBase);\n        }\n\n        let logsPath = join(this.args.getProjectPath(), \"logs\", \"index\");\n        if (!existsSync(logsPath)) {\n            mkdirSync(logsPath);\n        }\n        return logsPath;\n    }\n}\n"],"file":"Logger.js"}