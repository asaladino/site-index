{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["Logger","constructor","args","logsPath","getLogsPath","logger","level","format","_format","json","transports","_transports","File","filename","save","state","Promise","resolve","file","JSON","stringify","info","log","report","logsPathBase","getProjectPath"],"mappings":";;;;;;;AACA;;AAKA;;AACA;;AACA;;;;AAEe,MAAMA,MAAN,CAAa;AAK1BC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,KAAKC,WAAL,EAAhB;AACA,SAAKC,MAAL,GAAc,2BAAa;AACzBC,MAAAA,KAAK,EAAE,MADkB;AAEzBC,MAAAA,MAAM,EAAEC,gBAAQC,IAAR,EAFiB;AAGzBC,MAAAA,UAAU,EAAE,CACV,IAAIC,oBAAYC,IAAhB,CAAqB;AAAEC,QAAAA,QAAQ,EAAE,gBAAK,KAAKV,QAAV,EAAoB,cAApB;AAAZ,OAArB,CADU;AAHa,KAAb,CAAd;AAOD;;AAEDW,EAAAA,IAAI,CAACC,KAAD,EAA2B;AAC7B,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC5B,UAAIC,IAAI,GAAG,gBAAK,KAAKf,QAAV,EAAoB,YAApB,CAAX;AACA,6BAAce,IAAd,EAAoBC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAApB;AACAE,MAAAA,OAAO;AACR,KAJM,CAAP;AAKD;;AAEDI,EAAAA,IAAI,CAACN,KAAD,EAAa;AACf,SAAKV,MAAL,CAAYiB,GAAZ,CAAgB,MAAhB,EAAwBH,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAxB;AACD;;AAEDQ,EAAAA,MAAM,CAACR,KAAD,EAAa;AACjB,SAAKD,IAAL,CAAUC,KAAV;AACA,SAAKM,IAAL,CAAUN,KAAV;AACD;;AAEDX,EAAAA,WAAW,GAAW;AACpB,QAAIoB,YAAY,GAAG,gBAAK,KAAKtB,IAAL,CAAUuB,cAAV,EAAL,EAAiC,MAAjC,CAAnB;;AACA,QAAI,CAAC,oBAAWD,YAAX,CAAL,EAA+B;AAC7B,yBAAUA,YAAV;AACD;;AAED,QAAIrB,QAAQ,GAAG,gBAAK,KAAKD,IAAL,CAAUuB,cAAV,EAAL,EAAiC,MAAjC,EAAyC,OAAzC,CAAf;;AACA,QAAI,CAAC,oBAAWtB,QAAX,CAAL,EAA2B;AACzB,yBAAUA,QAAV;AACD;;AACD,WAAOA,QAAP;AACD;;AA7CyB","sourcesContent":["// @flow\r\nimport {\r\n  createLogger,\r\n  format as _format,\r\n  transports as _transports\r\n} from \"winston\";\r\nimport Args from \"../Model/Args\";\r\nimport { join } from \"path\";\r\nimport { writeFileSync, existsSync, mkdirSync } from \"fs\";\r\n\r\nexport default class Logger {\r\n  args: Args;\r\n  logsPath: string;\r\n  logger: any;\r\n\r\n  constructor(args: Args) {\r\n    this.args = args;\r\n    this.logsPath = this.getLogsPath();\r\n    this.logger = createLogger({\r\n      level: \"info\",\r\n      format: _format.json(),\r\n      transports: [\r\n        new _transports.File({ filename: join(this.logsPath, \"last_run.log\") })\r\n      ]\r\n    });\r\n  }\r\n\r\n  save(state: any): Promise<any> {\r\n    return new Promise(resolve => {\r\n      let file = join(this.logsPath, \"state.json\");\r\n      writeFileSync(file, JSON.stringify(state));\r\n      resolve();\r\n    });\r\n  }\r\n\r\n  info(state: any) {\r\n    this.logger.log(\"info\", JSON.stringify(state));\r\n  }\r\n\r\n  report(state: any) {\r\n    this.save(state);\r\n    this.info(state);\r\n  }\r\n\r\n  getLogsPath(): string {\r\n    let logsPathBase = join(this.args.getProjectPath(), \"logs\");\r\n    if (!existsSync(logsPathBase)) {\r\n      mkdirSync(logsPathBase);\r\n    }\r\n\r\n    let logsPath = join(this.args.getProjectPath(), \"logs\", \"index\");\r\n    if (!existsSync(logsPath)) {\r\n      mkdirSync(logsPath);\r\n    }\r\n    return logsPath;\r\n  }\r\n}\r\n"],"file":"Logger.js"}