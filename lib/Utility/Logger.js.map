{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["Logger","constructor","args","logsPath","getLogsPath","logger","level","format","_format","json","transports","_transports","File","filename","save","state","Promise","resolve","file","JSON","stringify","info","log","report","logsPathBase","getProjectPath"],"mappings":"6FACA,gCAKA,2DACA,0BACA,sB,kFAEe,KAAMA,CAAAA,MAAO,CAKxBC,WAAW,CAACC,IAAD,CAAa,CACpB,KAAKA,IAAL,CAAYA,IAAZ,CACA,KAAKC,QAAL,CAAgB,KAAKC,WAAL,EAAhB,CACA,KAAKC,MAAL,CAAc,0BAAa,CACvBC,KAAK,CAAE,MADgB,CAEvBC,MAAM,CAAEC,gBAAQC,IAAR,EAFe,CAGvBC,UAAU,CAAE,CACR,GAAIC,qBAAYC,IAAhB,CAAqB,CAACC,QAAQ,CAAE,eAAK,KAAKV,QAAV,CAAoB,cAApB,CAAX,CAArB,CADQ,CAHW,CAAb,CAOjB,CAEDW,IAAI,CAACC,KAAD,CAA2B,CAC3B,MAAO,IAAIC,CAAAA,OAAJ,CAAYC,OAAO,EAAI,CAC1B,GAAIC,CAAAA,IAAI,CAAG,eAAK,KAAKf,QAAV,CAAoB,YAApB,CAAX,CACA,sBAAce,IAAd,CAAoBC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAApB,EACAE,OAAO,EACV,CAJM,CAKV,CAEDI,IAAI,CAACN,KAAD,CAAa,CACb,KAAKV,MAAL,CAAYiB,GAAZ,CAAgB,MAAhB,CAAwBH,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAxB,CACH,CAEDQ,MAAM,CAACR,KAAD,CAAa,CACf,KAAKD,IAAL,CAAUC,KAAV,EACA,KAAKM,IAAL,CAAUN,KAAV,CACH,CAEDX,WAAW,EAAW,CAClB,GAAIoB,CAAAA,YAAY,CAAG,eAAK,KAAKtB,IAAL,CAAUuB,cAAV,EAAL,CAAiC,MAAjC,CAAnB,CACA,GAAI,CAAC,mBAAWD,YAAX,CAAL,CAA+B,CAC3B,kBAAUA,YAAV,CACH,CAED,GAAIrB,CAAAA,QAAQ,CAAG,eAAK,KAAKD,IAAL,CAAUuB,cAAV,EAAL,CAAiC,MAAjC,CAAyC,OAAzC,CAAf,CACA,GAAI,CAAC,mBAAWtB,QAAX,CAAL,CAA2B,CACvB,kBAAUA,QAAV,CACH,CACD,MAAOA,CAAAA,QACV,CA7CuB,C","sourcesContent":["// @flow\r\nimport {\r\n    createLogger,\r\n    format as _format,\r\n    transports as _transports\r\n} from \"winston\";\r\nimport Args from \"../Model/Args\";\r\nimport {join} from \"path\";\r\nimport {writeFileSync, existsSync, mkdirSync} from \"fs\";\r\n\r\nexport default class Logger {\r\n    args: Args;\r\n    logsPath: string;\r\n    logger: any;\r\n\r\n    constructor(args: Args) {\r\n        this.args = args;\r\n        this.logsPath = this.getLogsPath();\r\n        this.logger = createLogger({\r\n            level: \"info\",\r\n            format: _format.json(),\r\n            transports: [\r\n                new _transports.File({filename: join(this.logsPath, \"last_run.log\")})\r\n            ]\r\n        });\r\n    }\r\n\r\n    save(state: any): Promise<any> {\r\n        return new Promise(resolve => {\r\n            let file = join(this.logsPath, \"state.json\");\r\n            writeFileSync(file, JSON.stringify(state));\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    info(state: any) {\r\n        this.logger.log(\"info\", JSON.stringify(state));\r\n    }\r\n\r\n    report(state: any) {\r\n        this.save(state);\r\n        this.info(state);\r\n    }\r\n\r\n    getLogsPath(): string {\r\n        let logsPathBase = join(this.args.getProjectPath(), \"logs\");\r\n        if (!existsSync(logsPathBase)) {\r\n            mkdirSync(logsPathBase);\r\n        }\r\n\r\n        let logsPath = join(this.args.getProjectPath(), \"logs\", \"index\");\r\n        if (!existsSync(logsPath)) {\r\n            mkdirSync(logsPath);\r\n        }\r\n        return logsPath;\r\n    }\r\n}\r\n"],"file":"Logger.js"}