{"version":3,"sources":["../../src/Utility/Logger.js"],"names":["Logger","constructor","args","logsPath","getLogsPath","logger","winston","createLogger","level","format","json","transports","File","filename","save","state","Promise","resolve","file","JSON","stringify","info","log","report","logsPathBase","getProjectPath"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAEe,MAAMA,MAAN,CAAa;AAKxBC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,QAAL,GAAgB,KAAKC,WAAL,EAAhB;AACA,SAAKC,MAAL,GAAcC,iBAAQC,YAAR,CAAqB;AAC/BC,MAAAA,KAAK,EAAE,MADwB;AAE/BC,MAAAA,MAAM,EAAEH,iBAAQG,MAAR,CAAeC,IAAf,EAFuB;AAG/BC,MAAAA,UAAU,EAAE,CACR,IAAIL,iBAAQK,UAAR,CAAmBC,IAAvB,CAA4B;AAACC,QAAAA,QAAQ,EAAE,gBAAK,KAAKV,QAAV,EAAoB,cAApB;AAAX,OAA5B,CADQ;AAHmB,KAArB,CAAd;AAOH;;AAEDW,EAAAA,IAAI,CAACC,KAAD,EAA2B;AAC3B,WAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAI;AAC1B,UAAIC,IAAI,GAAG,gBAAK,KAAKf,QAAV,EAAoB,YAApB,CAAX;AACA,6BAAce,IAAd,EAAoBC,IAAI,CAACC,SAAL,CAAeL,KAAf,CAApB;AACAE,MAAAA,OAAO;AACV,KAJM,CAAP;AAKH;;AAEDI,EAAAA,IAAI,CAACN,KAAD,EAAa;AACb,SAAKV,MAAL,CAAYiB,GAAZ,CAAgB,MAAhB,EAAwBH,IAAI,CAACC,SAAL,CAAeL,KAAf,CAAxB;AACH;;AAEDQ,EAAAA,MAAM,CAACR,KAAD,EAAa;AACf,SAAKD,IAAL,CAAUC,KAAV;AACA,SAAKM,IAAL,CAAUN,KAAV;AACH;;AAEDX,EAAAA,WAAW,GAAW;AAClB,QAAIoB,YAAY,GAAG,gBAAK,KAAKtB,IAAL,CAAUuB,cAAV,EAAL,EAAiC,MAAjC,CAAnB;;AACA,QAAI,CAAC,oBAAWD,YAAX,CAAL,EAA+B;AAC3B,yBAAUA,YAAV;AACH;;AAED,QAAIrB,QAAQ,GAAG,gBAAK,KAAKD,IAAL,CAAUuB,cAAV,EAAL,EAAiC,MAAjC,EAAyC,OAAzC,CAAf;;AACA,QAAI,CAAC,oBAAWtB,QAAX,CAAL,EAA2B;AACvB,yBAAUA,QAAV;AACH;;AACD,WAAOA,QAAP;AACH;;AA7CuB","sourcesContent":["// @flow\nimport winston from 'winston';\nimport Args from \"../Model/Args.js\";\nimport {join} from \"path\";\nimport {writeFileSync, existsSync, mkdirSync} from \"fs\";\n\nexport default class Logger {\n    args: Args;\n    logsPath: string;\n    logger: any;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.logsPath = this.getLogsPath();\n        this.logger = winston.createLogger({\n            level: \"info\",\n            format: winston.format.json(),\n            transports: [\n                new winston.transports.File({filename: join(this.logsPath, \"last_run.log\")})\n            ]\n        });\n    }\n\n    save(state: any): Promise<any> {\n        return new Promise(resolve => {\n            let file = join(this.logsPath, \"state.json\");\n            writeFileSync(file, JSON.stringify(state));\n            resolve();\n        });\n    }\n\n    info(state: any) {\n        this.logger.log(\"info\", JSON.stringify(state));\n    }\n\n    report(state: any) {\n        this.save(state);\n        this.info(state);\n    }\n\n    getLogsPath(): string {\n        let logsPathBase = join(this.args.getProjectPath(), \"logs\");\n        if (!existsSync(logsPathBase)) {\n            mkdirSync(logsPathBase);\n        }\n\n        let logsPath = join(this.args.getProjectPath(), \"logs\", \"index\");\n        if (!existsSync(logsPath)) {\n            mkdirSync(logsPath);\n        }\n        return logsPath;\n    }\n}\n"],"file":"Logger.js"}