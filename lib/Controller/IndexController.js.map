{"version":3,"sources":["../../src/Controller/IndexController.js"],"names":["IndexController","constructor","args","logger","Logger","start","callback","event","progress","Promise","resolve","reject","output","doesFolderExist","isCrawl","isSingle","crawlService","CrawlService","on","report","toLog","verbose","console","log","toString","sitemapService","SitemapService"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;;;AAEe,MAAMA,eAAN,CAAsB;AAInCC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,eAAJ,CAAWF,IAAX,CAAd;AACD;;AAEDG,EAAAA,KAAK,GAA8D;AAAA,QAA7DC,QAA6D,uEAAxC,CAACC,KAAD,EAAQC,QAAR,KAAqB,CAAE,CAAiB;AACjE,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKT,IAAL,CAAUU,MAAV,CAAiBC,eAAjB;;AACA,UAAI,KAAKX,IAAL,CAAUY,OAAV,MAAuB,KAAKZ,IAAL,CAAUa,QAAV,EAA3B,EAAiD;AAC/C,YAAIC,YAAY,GAAG,IAAIC,qBAAJ,CAAiB,KAAKf,IAAtB,CAAnB;AACAc,QAAAA,YAAY,CACTE,EADH,CACM,UADN,EACkBV,QAAQ,IAAI;AAC1BF,UAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,eAAKL,MAAL,CAAYgB,MAAZ,CAAmBX,QAAQ,CAACY,KAAT,EAAnB;;AACA,cAAI,KAAKlB,IAAL,CAAUmB,OAAd,EAAuB;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACgB,QAAT,EAAZ;AACD;AACF,SAPH,EAQGN,EARH,CAQM,UARN,EAQkB,MAAM;AACpBZ,UAAAA,QAAQ,CAAC,UAAD,CAAR;;AACA,cAAI,KAAKJ,IAAL,CAAUmB,OAAd,EAAuB;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AACDb,UAAAA,OAAO;AACR,SAdH;AAeAM,QAAAA,YAAY,CAACX,KAAb;AACD,OAlBD,MAkBO;AACL,YAAIoB,cAAc,GAAG,IAAIC,uBAAJ,CAAmB,KAAKxB,IAAxB,CAArB;AACAuB,QAAAA,cAAc,CACXP,EADH,CACM,UADN,EACkBV,QAAQ,IAAI;AAC1BF,UAAAA,QAAQ,CAAC,UAAD,EAAaE,QAAb,CAAR;AACA,eAAKL,MAAL,CAAYgB,MAAZ,CAAmBX,QAAQ,CAACY,KAAT,EAAnB;;AACA,cAAI,KAAKlB,IAAL,CAAUmB,OAAd,EAAuB;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAYf,QAAQ,CAACgB,QAAT,EAAZ;AACD;AACF,SAPH,EAQGN,EARH,CAQM,UARN,EAQkB,MAAM;AACpBZ,UAAAA,QAAQ,CAAC,UAAD,CAAR;;AACA,cAAI,KAAKJ,IAAL,CAAUmB,OAAd,EAAuB;AACrBC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACD;;AACDb,UAAAA,OAAO;AACR,SAdH;AAeAe,QAAAA,cAAc,CAACpB,KAAf;AACD;AACF,KAvCM,CAAP;AAwCD;;AAlDkC","sourcesContent":["// @flow\r\nimport CrawlService from '../Service/CrawlService';\r\nimport SitemapService from '../Service/SitemapService';\r\n\r\nimport Logger from '../Utility/Logger';\r\nimport Args from '../Model/Args';\r\n\r\nexport default class IndexController {\r\n  args: Args;\r\n  logger: Logger;\r\n\r\n  constructor(args: Args) {\r\n    this.args = args;\r\n    this.logger = new Logger(args);\r\n  }\r\n\r\n  start(callback: function = (event, progress) => {}): Promise<void> {\r\n    return new Promise((resolve, reject) => {\r\n      this.args.output.doesFolderExist();\r\n      if (this.args.isCrawl() || this.args.isSingle()) {\r\n        let crawlService = new CrawlService(this.args);\r\n        crawlService\r\n          .on('progress', progress => {\r\n            callback('progress', progress);\r\n            this.logger.report(progress.toLog());\r\n            if (this.args.verbose) {\r\n              console.log(progress.toString());\r\n            }\r\n          })\r\n          .on('complete', () => {\r\n            callback('complete');\r\n            if (this.args.verbose) {\r\n              console.log('Done');\r\n            }\r\n            resolve();\r\n          });\r\n        crawlService.start();\r\n      } else {\r\n        let sitemapService = new SitemapService(this.args);\r\n        sitemapService\r\n          .on('progress', progress => {\r\n            callback('progress', progress);\r\n            this.logger.report(progress.toLog());\r\n            if (this.args.verbose) {\r\n              console.log(progress.toString());\r\n            }\r\n          })\r\n          .on('complete', () => {\r\n            callback('complete');\r\n            if (this.args.verbose) {\r\n              console.log('Done');\r\n            }\r\n            resolve();\r\n          });\r\n        sitemapService.start();\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"file":"IndexController.js"}