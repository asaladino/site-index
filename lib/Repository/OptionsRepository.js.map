{"version":3,"sources":["../../src/Repository/OptionsRepository.js"],"names":["existsSync","readFileSync","writeFileSync","mkdirSync","join","Option","OptionDefaults","Args","OptionsRepository","constructor","args","folder","createFolder","file","getSiteName","getOption","option","JSON","parse","toString","save","stringify","optionsFolder","output","filename"],"mappings":"AACA,SAAQA,UAAR,EAAoBC,YAApB,EAAkCC,aAAlC,EAAiDC,SAAjD,QAAiE,IAAjE;AACA,SAAQC,IAAR,QAAmB,MAAnB;AAEA,OAAOC,MAAP,MAAmB,oBAAnB;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AAEA;;;;AAGA,eAAe,MAAMC,iBAAN,CAAwB;AACnC;;;;AAIA;;;;AAIA;;;;AAIA;;;AAKAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,KAAKC,YAAL,EAAd;AACA,SAAKC,IAAL,GAAYT,IAAI,CAAC,KAAKO,MAAN,EAAc,KAAKD,IAAL,CAAUI,WAAV,KAA0B,OAAxC,CAAhB;AACH;AAED;;;;;AAGAC,EAAAA,SAAS,GAAW;AAChB,QAAI,KAAKC,MAAL,IAAe,IAAnB,EAAyB;AACrB,UAAIhB,UAAU,CAAC,KAAKa,IAAN,CAAd,EAA2B;AACvB,aAAKG,MAAL,GAAc,IAAIX,MAAJ,CACVY,IAAI,CAACC,KAAL,CAAWjB,YAAY,CAAC,KAAKY,IAAN,CAAZ,CAAwBM,QAAxB,EAAX,CADU,CAAd;AAGH,OAJD,MAIO;AACH,aAAKH,MAAL,GAAc,IAAIX,MAAJ,CAAWC,cAAX,CAAd;AACA,aAAKc,IAAL,CAAU,KAAKJ,MAAf;AACH;AACJ;;AACD,WAAO,KAAKA,MAAZ;AACH;AAED;;;;;AAGAI,EAAAA,IAAI,CAACJ,MAAD,EAAiB;AACjBd,IAAAA,aAAa,CAAC,KAAKW,IAAN,EAAYI,IAAI,CAACI,SAAL,CAAeL,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAZ,CAAb;AACH;AAED;;;;;AAGAJ,EAAAA,YAAY,GAAW;AACnB,UAAMU,aAAa,GAAGlB,IAAI,CAAC,KAAKM,IAAL,CAAUa,MAAV,CAAiBC,QAAlB,EAA4B,SAA5B,CAA1B;;AACA,QAAI,CAACxB,UAAU,CAACsB,aAAD,CAAf,EAAgC;AAC5BnB,MAAAA,SAAS,CAACmB,aAAD,CAAT;AACH;;AACD,WAAOA,aAAP;AACH;;AAzDkC","sourcesContent":["// @flow\nimport {existsSync, readFileSync, writeFileSync, mkdirSync} from \"fs\";\nimport {join} from \"path\";\n\nimport Option from \"../Model/Option.js\";\nimport OptionDefaults from \"../Assets/OptionDefaults.json\";\nimport Args from \"../Model/Args.js\";\n\n/**\n * Save and load options for the index.\n */\nexport default class OptionsRepository {\n    /**\n     * Passed in from the command-line.\n     */\n    args: Args;\n    /**\n     * Folder where the options are saved.\n     */\n    folder: string;\n    /**\n     * Path to the options file.\n     */\n    file: string;\n    /**\n     * Options for the site indexing.\n     */\n    option: Option;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.folder = this.createFolder();\n        this.file = join(this.folder, this.args.getSiteName() + \".json\");\n    }\n\n    /**\n     * Get the option from file or load defaults or load from memory.\n     */\n    getOption(): Option {\n        if (this.option == null) {\n            if (existsSync(this.file)) {\n                this.option = new Option(\n                    JSON.parse(readFileSync(this.file).toString())\n                );\n            } else {\n                this.option = new Option(OptionDefaults);\n                this.save(this.option);\n            }\n        }\n        return this.option;\n    }\n\n    /**\n     * Save the option to file.\n     */\n    save(option: Option) {\n        writeFileSync(this.file, JSON.stringify(option, null, 2));\n    }\n\n    /**\n     * Create the options folder.\n     */\n    createFolder(): string {\n        const optionsFolder = join(this.args.output.filename, \"options\");\n        if (!existsSync(optionsFolder)) {\n            mkdirSync(optionsFolder);\n        }\n        return optionsFolder;\n    }\n}\n"],"file":"OptionsRepository.js"}