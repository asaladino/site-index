{"version":3,"sources":["../../src/Repository/OptionsRepository.js"],"names":["OptionsRepository","constructor","args","folder","createFolder","file","getSiteName","getOption","option","Option","JSON","parse","toString","OptionDefaults","save","stringify","optionsFolder","output","filename"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,iBAAN,CAAwB;AACrC;;;;AAIA;;;;AAIA;;;;AAIA;;;AAKAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,KAAKC,YAAL,EAAd;AACA,SAAKC,IAAL,GAAY,gBAAK,KAAKF,MAAV,EAAkB,KAAKD,IAAL,CAAUI,WAAV,KAA0B,OAA5C,CAAZ;AACD;AAED;;;;;AAGAC,EAAAA,SAAS,GAAW;AAClB,QAAI,KAAKC,MAAL,IAAe,IAAnB,EAAyB;AACvB,UAAI,oBAAW,KAAKH,IAAhB,CAAJ,EAA2B;AACzB,aAAKG,MAAL,GAAc,IAAIC,eAAJ,CACZC,IAAI,CAACC,KAAL,CAAW,sBAAa,KAAKN,IAAlB,EAAwBO,QAAxB,EAAX,CADY,CAAd;AAGD,OAJD,MAIO;AACL,aAAKJ,MAAL,GAAc,IAAIC,eAAJ,CAAWI,uBAAX,CAAd;AACA,aAAKC,IAAL,CAAU,KAAKN,MAAf;AACD;AACF;;AACD,WAAO,KAAKA,MAAZ;AACD;AAED;;;;;AAGAM,EAAAA,IAAI,CAACN,MAAD,EAAiB;AACnB,2BAAc,KAAKH,IAAnB,EAAyBK,IAAI,CAACK,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAzB;AACD;AAED;;;;;AAGAJ,EAAAA,YAAY,GAAW;AACrB,UAAMY,aAAa,GAAG,gBAAK,KAAKd,IAAL,CAAUe,MAAV,CAAiBC,QAAtB,EAAgC,SAAhC,CAAtB;;AACA,QAAI,CAAC,oBAAWF,aAAX,CAAL,EAAgC;AAC9B,yBAAUA,aAAV;AACD;;AACD,WAAOA,aAAP;AACD;;AAzDoC","sourcesContent":["// @flow\r\nimport { existsSync, readFileSync, writeFileSync, mkdirSync } from \"fs\";\r\nimport { join } from \"path\";\r\n\r\nimport Option from \"../Model/Option\";\r\nimport OptionDefaults from \"../Assets/OptionDefaults.json\";\r\nimport Args from \"../Model/Args\";\r\n\r\n/**\r\n * Save and load options for the index.\r\n */\r\nexport default class OptionsRepository {\r\n  /**\r\n   * Passed in from the command-line.\r\n   */\r\n  args: Args;\r\n  /**\r\n   * Folder where the options are saved.\r\n   */\r\n  folder: string;\r\n  /**\r\n   * Path to the options file.\r\n   */\r\n  file: string;\r\n  /**\r\n   * Options for the site indexing.\r\n   */\r\n  option: Option;\r\n\r\n  constructor(args: Args) {\r\n    this.args = args;\r\n    this.folder = this.createFolder();\r\n    this.file = join(this.folder, this.args.getSiteName() + \".json\");\r\n  }\r\n\r\n  /**\r\n   * Get the option from file or load defaults or load from memory.\r\n   */\r\n  getOption(): Option {\r\n    if (this.option == null) {\r\n      if (existsSync(this.file)) {\r\n        this.option = new Option(\r\n          JSON.parse(readFileSync(this.file).toString())\r\n        );\r\n      } else {\r\n        this.option = new Option(OptionDefaults);\r\n        this.save(this.option);\r\n      }\r\n    }\r\n    return this.option;\r\n  }\r\n\r\n  /**\r\n   * Save the option to file.\r\n   */\r\n  save(option: Option) {\r\n    writeFileSync(this.file, JSON.stringify(option, null, 2));\r\n  }\r\n\r\n  /**\r\n   * Create the options folder.\r\n   */\r\n  createFolder(): string {\r\n    const optionsFolder = join(this.args.output.filename, \"options\");\r\n    if (!existsSync(optionsFolder)) {\r\n      mkdirSync(optionsFolder);\r\n    }\r\n    return optionsFolder;\r\n  }\r\n}\r\n"],"file":"OptionsRepository.js"}