{"version":3,"sources":["../../src/Repository/OptionsRepository.js"],"names":["OptionsRepository","constructor","args","folder","createFolder","file","getSiteName","getOption","option","Option","JSON","parse","toString","OptionDefaults","save","stringify","optionsFolder","output","filename"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,iBAAN,CAAwB;AACnC;;;;AAIA;;;;AAIA;;;;AAIA;;;AAKAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,KAAKC,YAAL,EAAd;AACA,SAAKC,IAAL,GAAY,gBAAK,KAAKF,MAAV,EAAkB,KAAKD,IAAL,CAAUI,WAAV,KAA0B,OAA5C,CAAZ;AACH;AAED;;;;;AAGAC,EAAAA,SAAS,GAAW;AAChB,QAAI,KAAKC,MAAL,IAAe,IAAnB,EAAyB;AACrB,UAAI,oBAAW,KAAKH,IAAhB,CAAJ,EAA2B;AACvB,aAAKG,MAAL,GAAc,IAAIC,eAAJ,CACVC,IAAI,CAACC,KAAL,CAAW,sBAAa,KAAKN,IAAlB,EAAwBO,QAAxB,EAAX,CADU,CAAd;AAGH,OAJD,MAIO;AACH,aAAKJ,MAAL,GAAc,IAAIC,eAAJ,CAAWI,uBAAX,CAAd;AACA,aAAKC,IAAL,CAAU,KAAKN,MAAf;AACH;AACJ;;AACD,WAAO,KAAKA,MAAZ;AACH;AAED;;;;;AAGAM,EAAAA,IAAI,CAACN,MAAD,EAAiB;AACjB,2BAAc,KAAKH,IAAnB,EAAyBK,IAAI,CAACK,SAAL,CAAeP,MAAf,EAAuB,IAAvB,EAA6B,CAA7B,CAAzB;AACH;AAED;;;;;AAGAJ,EAAAA,YAAY,GAAW;AACnB,UAAMY,aAAa,GAAG,gBAAK,KAAKd,IAAL,CAAUe,MAAV,CAAiBC,QAAtB,EAAgC,SAAhC,CAAtB;;AACA,QAAI,CAAC,oBAAWF,aAAX,CAAL,EAAgC;AAC5B,yBAAUA,aAAV;AACH;;AACD,WAAOA,aAAP;AACH;;AAzDkC","sourcesContent":["// @flow\nimport {existsSync, readFileSync, writeFileSync, mkdirSync} from \"fs\";\nimport {join} from \"path\";\n\nimport Option from \"../Model/Option.js\";\nimport OptionDefaults from \"../Assets/OptionDefaults.json\";\nimport Args from \"../Model/Args.js\";\n\n/**\n * Save and load options for the index.\n */\nexport default class OptionsRepository {\n    /**\n     * Passed in from the command-line.\n     */\n    args: Args;\n    /**\n     * Folder where the options are saved.\n     */\n    folder: string;\n    /**\n     * Path to the options file.\n     */\n    file: string;\n    /**\n     * Options for the site indexing.\n     */\n    option: Option;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.folder = this.createFolder();\n        this.file = join(this.folder, this.args.getSiteName() + \".json\");\n    }\n\n    /**\n     * Get the option from file or load defaults or load from memory.\n     */\n    getOption(): Option {\n        if (this.option == null) {\n            if (existsSync(this.file)) {\n                this.option = new Option(\n                    JSON.parse(readFileSync(this.file).toString())\n                );\n            } else {\n                this.option = new Option(OptionDefaults);\n                this.save(this.option);\n            }\n        }\n        return this.option;\n    }\n\n    /**\n     * Save the option to file.\n     */\n    save(option: Option) {\n        writeFileSync(this.file, JSON.stringify(option, null, 2));\n    }\n\n    /**\n     * Create the options folder.\n     */\n    createFolder(): string {\n        const optionsFolder = join(this.args.output.filename, \"options\");\n        if (!existsSync(optionsFolder)) {\n            mkdirSync(optionsFolder);\n        }\n        return optionsFolder;\n    }\n}\n"],"file":"OptionsRepository.js"}