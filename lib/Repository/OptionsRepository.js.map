{"version":3,"sources":["../../src/Repository/OptionsRepository.js"],"names":["OptionsRepository","constructor","args","folder","createFolder","file","getSiteName","getOption","option","Option","JSON","parse","toString","OptionDefaults","save","stringify","optionsFolder","output","filename"],"mappings":"6FACA,sBACA,0BAEA,+DACA,qFACA,2D,kFAEA;;GAGe,KAAMA,CAAAA,iBAAkB,CACnC;;OADmC,CAKnC;;OALmC,CASnC;;OATmC,CAanC;;OAKAC,WAAW,CAACC,IAAD,CAAa,CACpB,KAAKA,IAAL,CAAYA,IAAZ,CACA,KAAKC,MAAL,CAAc,KAAKC,YAAL,EAAd,CACA,KAAKC,IAAL,CAAY,eAAK,KAAKF,MAAV,CAAkB,KAAKD,IAAL,CAAUI,WAAV,GAA0B,OAA5C,CACf,CAED;;OAGAC,SAAS,EAAW,CAChB,GAAI,KAAKC,MAAL,EAAe,IAAnB,CAAyB,CACrB,GAAI,mBAAW,KAAKH,IAAhB,CAAJ,CAA2B,CACvB,KAAKG,MAAL,CAAc,GAAIC,gBAAJ,CACVC,IAAI,CAACC,KAAL,CAAW,qBAAa,KAAKN,IAAlB,EAAwBO,QAAxB,EAAX,CADU,CAGjB,CAJD,IAIO,CACH,KAAKJ,MAAL,CAAc,GAAIC,gBAAJ,CAAWI,uBAAX,CAAd,CACA,KAAKC,IAAL,CAAU,KAAKN,MAAf,CACH,CACJ,CACD,MAAO,MAAKA,MACf,CAED;;OAGAM,IAAI,CAACN,MAAD,CAAiB,CACjB,sBAAc,KAAKH,IAAnB,CAAyBK,IAAI,CAACK,SAAL,CAAeP,MAAf,CAAuB,IAAvB,CAA6B,CAA7B,CAAzB,CACH,CAED;;OAGAJ,YAAY,EAAW,CACnB,KAAMY,CAAAA,aAAa,CAAG,eAAK,KAAKd,IAAL,CAAUe,MAAV,CAAiBC,QAAtB,CAAgC,SAAhC,CAAtB,CACA,GAAI,CAAC,mBAAWF,aAAX,CAAL,CAAgC,CAC5B,kBAAUA,aAAV,CACH,CACD,MAAOA,CAAAA,aACV,CAzDkC,C","sourcesContent":["// @flow\nimport {existsSync, readFileSync, writeFileSync, mkdirSync} from \"fs\";\nimport {join} from \"path\";\n\nimport Option from \"../Model/Option\";\nimport OptionDefaults from \"../Assets/OptionDefaults.json\";\nimport Args from \"../Model/Args\";\n\n/**\n * Save and load options for the index.\n */\nexport default class OptionsRepository {\n    /**\n     * Passed in from the command-line.\n     */\n    args: Args;\n    /**\n     * Folder where the options are saved.\n     */\n    folder: string;\n    /**\n     * Path to the options file.\n     */\n    file: string;\n    /**\n     * Options for the site indexing.\n     */\n    option: Option;\n\n    constructor(args: Args) {\n        this.args = args;\n        this.folder = this.createFolder();\n        this.file = join(this.folder, this.args.getSiteName() + \".json\");\n    }\n\n    /**\n     * Get the option from file or load defaults or load from memory.\n     */\n    getOption(): Option {\n        if (this.option == null) {\n            if (existsSync(this.file)) {\n                this.option = new Option(\n                    JSON.parse(readFileSync(this.file).toString())\n                );\n            } else {\n                this.option = new Option(OptionDefaults);\n                this.save(this.option);\n            }\n        }\n        return this.option;\n    }\n\n    /**\n     * Save the option to file.\n     */\n    save(option: Option) {\n        writeFileSync(this.file, JSON.stringify(option, null, 2));\n    }\n\n    /**\n     * Create the options folder.\n     */\n    createFolder(): string {\n        const optionsFolder = join(this.args.output.filename, \"options\");\n        if (!existsSync(optionsFolder)) {\n            mkdirSync(optionsFolder);\n        }\n        return optionsFolder;\n    }\n}\n"],"file":"OptionsRepository.js"}