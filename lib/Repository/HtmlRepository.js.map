{"version":3,"sources":["../../src/Repository/HtmlRepository.js"],"names":["HtmlRepository","constructor","projectFolder","save","url","html","file","getProjectsHtmlFolder","name","Promise","resolve","projectsPathHtml"],"mappings":"6FACA,sBACA,yDACA,0B,kFAEA;;GAGe,KAAMA,CAAAA,cAAe,CAChC;;OADgC,CAMhC;;OAGAC,WAAW,CAACC,aAAD,CAAwB,CAC/B,KAAKA,aAAL,CAAqBA,aACxB,CAED;;OAGAC,IAAI,CAACC,GAAD,CAAWC,IAAX,CAAuC,CACvC,KAAMC,CAAAA,IAAI,CAAG,eAAK,KAAKC,qBAAL,EAAL,CAAmCH,GAAG,CAACI,IAAJ,CAAW,OAA9C,CAAb,CACA,MAAO,IAAIC,CAAAA,OAAJ,CAAYC,OAAO,EAAI,CAC1B,sBAAcJ,IAAd,CAAoBD,IAApB,EACAK,OAAO,EACV,CAHM,CAIV,CAED;;OAGAH,qBAAqB,EAAW,CAC5B,GAAII,CAAAA,gBAAgB,CAAG,eAAK,KAAKT,aAAV,CAAyB,MAAzB,CAAvB,CACA,GAAI,CAAC,mBAAWS,gBAAX,CAAL,CAAmC,CAC/B,kBAAUA,gBAAV,CACH,CACD,MAAOA,CAAAA,gBACV,CAjC+B,C","sourcesContent":["// @flow\r\nimport {writeFileSync, existsSync, mkdirSync} from \"fs\";\r\nimport Url from \"../Model/Url\";\r\nimport {join} from \"path\";\r\n\r\n/**\r\n * Save the url html to file.\r\n */\r\nexport default class HtmlRepository {\r\n    /**\r\n     * Location to the html folder in the project.\r\n     */\r\n    projectFolder: string;\r\n\r\n    /**\r\n     * Build a json url repo.\r\n     */\r\n    constructor(projectFolder: string) {\r\n        this.projectFolder = projectFolder;\r\n    }\r\n\r\n    /**\r\n     * Save html to a file.\r\n     */\r\n    save(url: Url, html: string): Promise<any> {\r\n        const file = join(this.getProjectsHtmlFolder(), url.name + \".html\");\r\n        return new Promise(resolve => {\r\n            writeFileSync(file, html);\r\n            resolve();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Creates the html folder in the project if it doesn't exist.\r\n     */\r\n    getProjectsHtmlFolder(): string {\r\n        let projectsPathHtml = join(this.projectFolder, \"html\");\r\n        if (!existsSync(projectsPathHtml)) {\r\n            mkdirSync(projectsPathHtml);\r\n        }\r\n        return projectsPathHtml;\r\n    }\r\n}\r\n"],"file":"HtmlRepository.js"}