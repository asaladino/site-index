{"version":3,"sources":["../../src/Repository/SqliteCrawlStatesRepository.js"],"names":["SqliteCrawlStatesRepository","constructor","projectFolder","createIndexFolder","db","Database","databaseFile","insertUrlsStmt","prepare","insertUrlsAttemptedStmt","insertUrlsPoolStmt","initUrlsPool","urls","run","forEach","url","urlsPoolSize","result","get","size","urlsSize","addPoolUrl","findAttemptedUrls","addUrl","name","findAllUrls","all","checkUrl","replace","query","popPoolUrl","projectsPathUrls","tempDbFile","__filename"],"mappings":"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","sourcesContent":["// @flow\r\nimport { existsSync, mkdirSync, copyFileSync } from \"fs\";\r\nimport { join, dirname } from \"path\";\r\nimport Database from \"better-sqlite3\";\r\n\r\nimport Url from \"../Model/Url\";\r\n\r\n/**\r\n * Read and write the current crawl state to file.\r\n */\r\nexport default class SqliteCrawlStatesRepository {\r\n  projectFolder: string;\r\n  databaseFile: string;\r\n  db: Database;\r\n  insertUrlsStmt: any;\r\n  insertUrlsAttemptedStmt: any;\r\n  insertUrlsPoolStmt: any;\r\n\r\n  constructor(projectFolder: string) {\r\n    this.projectFolder = projectFolder;\r\n\r\n    this.createIndexFolder();\r\n    this.db = new Database(this.databaseFile, {});\r\n\r\n    this.insertUrlsStmt = this.db.prepare(\"INSERT INTO urls VALUES (?, ?)\");\r\n    this.insertUrlsAttemptedStmt = this.db.prepare(\r\n      \"INSERT INTO urls_attempted VALUES (?)\"\r\n    );\r\n    this.insertUrlsPoolStmt = this.db.prepare(\r\n      \"INSERT INTO urls_pool VALUES (?)\"\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Truncate and initialize the pool.\r\n   */\r\n  initUrlsPool(urls: string[]) {\r\n    this.db.prepare(\"DELETE FROM urls_pool\").run();\r\n    this.db.prepare(\"VACUUM\").run();\r\n    urls.forEach(url => this.insertUrlsPoolStmt.run([url]));\r\n  }\r\n\r\n  /**\r\n   * Get the number of urls in the urls pool.\r\n   */\r\n  urlsPoolSize(): number {\r\n    const result = this.db\r\n      .prepare(\"SELECT COUNT(*) as size FROM urls_pool\")\r\n      .get();\r\n    return result.size;\r\n  }\r\n\r\n  /**\r\n   * Get the number of urls found.\r\n   */\r\n  urlsSize(): number {\r\n    return this.db.prepare(\"SELECT COUNT(*) as size FROM urls\").get().size;\r\n  }\r\n\r\n  /**\r\n   * Add a url that needs to be crawled.\r\n   */\r\n  addPoolUrl(url: string) {\r\n    if (this.findAttemptedUrls(url) === 0) {\r\n      this.insertUrlsPoolStmt.run([url]);\r\n      this.insertUrlsAttemptedStmt.run([url]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a found url.\r\n   */\r\n  addUrl(url: Url) {\r\n    this.insertUrlsStmt.run([url.name, url.url]);\r\n  }\r\n\r\n  /**\r\n   * Find all the urls found during the crawl.\r\n   */\r\n  findAllUrls(): Url[] {\r\n    return this.db.prepare(\"SELECT * FROM urls\").all();\r\n  }\r\n\r\n  /**\r\n   * Find the number of attempted urls.\r\n   */\r\n  findAttemptedUrls(url: string): number {\r\n    // Remove protocol and trailing slash to avoid duplicate indexing.\r\n    const checkUrl = url.replace(/(https|http)/i, \"\");\r\n    const query = `SELECT COUNT(*) as size FROM urls_attempted WHERE url='http${checkUrl}' OR url='https${checkUrl}'`;\r\n    const result = this.db.prepare(query).get();\r\n    return result.size;\r\n  }\r\n\r\n  /**\r\n   * Pop a url off the urls pools and return.\r\n   */\r\n  popPoolUrl(): string {\r\n    const url = this.db.prepare(\"SELECT * FROM urls_pool LIMIT 1\").get();\r\n    this.db.prepare(\"DELETE FROM urls_pool WHERE url = ?\").run([url.url]);\r\n    return url.url;\r\n  }\r\n\r\n  /**\r\n   * Creates the urls folder in the project if it doesn't exist.\r\n   */\r\n  createIndexFolder() {\r\n    let projectsPathUrls = join(this.projectFolder, \"urls\");\r\n    if (!existsSync(projectsPathUrls)) {\r\n      mkdirSync(projectsPathUrls);\r\n    }\r\n\r\n    this.databaseFile = join(projectsPathUrls, \"crawl_state.sqlite\");\r\n\r\n    if (!existsSync(this.databaseFile)) {\r\n      let tempDbFile = join(\r\n        dirname(__filename),\r\n        \"../Assets/crawl_state.sqlite\"\r\n      );\r\n      copyFileSync(tempDbFile, this.databaseFile);\r\n    }\r\n  }\r\n}\r\n"],"file":"SqliteCrawlStatesRepository.js"}