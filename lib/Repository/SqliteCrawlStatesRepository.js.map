{"version":3,"sources":["../../src/Repository/SqliteCrawlStatesRepository.js"],"names":["SqliteCrawlStatesRepository","constructor","projectFolder","createIndexFolder","db","Database","databaseFile","insertUrlsStmt","prepare","insertUrlsAttemptedStmt","insertUrlsPoolStmt","initUrlsPool","urls","run","forEach","url","urlsPoolSize","result","get","size","urlsSize","addPoolUrl","findAttemptedUrls","addUrl","name","findAllUrls","all","checkUrl","replace","query","popPoolUrl","projectsPathUrls","tempDbFile","__filename"],"mappings":"6FACA,sBACA,0BACA,oEAEA,yD,kFAEA;;GAGe,KAAMA,CAAAA,2BAA4B,CAQ7CC,WAAW,CAACC,aAAD,CAAwB,CAC/B,KAAKA,aAAL,CAAqBA,aAArB,CAEA,KAAKC,iBAAL,GACA,KAAKC,EAAL,CAAU,GAAIC,sBAAJ,CAAa,KAAKC,YAAlB,CAAgC,EAAhC,CAAV,CAEA,KAAKC,cAAL,CAAsB,KAAKH,EAAL,CAAQI,OAAR,CAAgB,gCAAhB,CAAtB,CACA,KAAKC,uBAAL,CAA+B,KAAKL,EAAL,CAAQI,OAAR,CAC3B,uCAD2B,CAA/B,CAGA,KAAKE,kBAAL,CAA0B,KAAKN,EAAL,CAAQI,OAAR,CACtB,kCADsB,CAG7B,CAED;;OAGAG,YAAY,CAACC,IAAD,CAAiB,CACzB,KAAKR,EAAL,CAAQI,OAAR,CAAgB,uBAAhB,EAAyCK,GAAzC,GACA,KAAKT,EAAL,CAAQI,OAAR,CAAgB,QAAhB,EAA0BK,GAA1B,GACAD,IAAI,CAACE,OAAL,CAAaC,GAAG,EAAI,KAAKL,kBAAL,CAAwBG,GAAxB,CAA4B,CAACE,GAAD,CAA5B,CAApB,CACH,CAED;;OAGAC,YAAY,EAAW,CACnB,KAAMC,CAAAA,MAAM,CAAG,KAAKb,EAAL,CACVI,OADU,CACF,wCADE,EAEVU,GAFU,EAAf,CAGA,MAAOD,CAAAA,MAAM,CAACE,IACjB,CAED;;OAGAC,QAAQ,EAAW,CACf,MAAO,MAAKhB,EAAL,CAAQI,OAAR,CAAgB,mCAAhB,EAAqDU,GAArD,GAA2DC,IACrE,CAED;;OAGAE,UAAU,CAACN,GAAD,CAAc,CACpB,GAAI,KAAKO,iBAAL,CAAuBP,GAAvB,IAAgC,CAApC,CAAuC,CACnC,KAAKL,kBAAL,CAAwBG,GAAxB,CAA4B,CAACE,GAAD,CAA5B,EACA,KAAKN,uBAAL,CAA6BI,GAA7B,CAAiC,CAACE,GAAD,CAAjC,CACH,CACJ,CAED;;OAGAQ,MAAM,CAACR,GAAD,CAAW,CACb,KAAKR,cAAL,CAAoBM,GAApB,CAAwB,CAACE,GAAG,CAACA,GAAL,CAAUA,GAAG,CAACS,IAAd,CAAxB,CACH,CAED;;OAGAC,WAAW,EAAU,CACjB,MAAO,MAAKrB,EAAL,CAAQI,OAAR,CAAgB,oBAAhB,EAAsCkB,GAAtC,EACV,CAED;;OAGAJ,iBAAiB,CAACP,GAAD,CAAsB,CACnC;AACA,KAAMY,CAAAA,QAAQ,CAAGZ,GAAG,CAACa,OAAJ,CAAY,eAAZ,CAA6B,EAA7B,CAAjB,CACA,KAAMC,CAAAA,KAAK,sEAAiEF,QAAjE,2BAA2FA,QAA3F,KAAX,CACA,KAAMV,CAAAA,MAAM,CAAG,KAAKb,EAAL,CAAQI,OAAR,CAAgBqB,KAAhB,EAAuBX,GAAvB,EAAf,CACA,MAAOD,CAAAA,MAAM,CAACE,IACjB,CAED;;OAGAW,UAAU,EAAW,CACjB,KAAMf,CAAAA,GAAG,CAAG,KAAKX,EAAL,CAAQI,OAAR,CAAgB,iCAAhB,EAAmDU,GAAnD,EAAZ,CACA,KAAKd,EAAL,CAAQI,OAAR,CAAgB,qCAAhB,EAAuDK,GAAvD,CAA2D,CAACE,GAAG,CAACA,GAAL,CAA3D,EACA,MAAOA,CAAAA,GAAG,CAACA,GACd,CAED;;OAGAZ,iBAAiB,EAAG,CAChB,GAAI4B,CAAAA,gBAAgB,CAAG,eAAK,KAAK7B,aAAV,CAAyB,MAAzB,CAAvB,CACA,GAAI,CAAC,mBAAW6B,gBAAX,CAAL,CAAmC,CAC/B,kBAAUA,gBAAV,CACH,CAED,KAAKzB,YAAL,CAAoB,eAAKyB,gBAAL,CAAuB,oBAAvB,CAApB,CAEA,GAAI,CAAC,mBAAW,KAAKzB,YAAhB,CAAL,CAAoC,CAChC,GAAI0B,CAAAA,UAAU,CAAG,eACb,kBAAQC,UAAR,CADa,CAEb,8BAFa,CAAjB,CAIA,qBAAaD,UAAb,CAAyB,KAAK1B,YAA9B,CACH,CACJ,CA/G4C,C","sourcesContent":["// @flow\nimport {existsSync, mkdirSync, copyFileSync} from \"fs\";\nimport {join, dirname} from \"path\";\nimport Database from \"better-sqlite3\";\n\nimport Url from \"../Model/Url\";\n\n/**\n * Read and write the current crawl state to file.\n */\nexport default class SqliteCrawlStatesRepository {\n    projectFolder: string;\n    databaseFile: string;\n    db: Database;\n    insertUrlsStmt: any;\n    insertUrlsAttemptedStmt: any;\n    insertUrlsPoolStmt: any;\n\n    constructor(projectFolder: string) {\n        this.projectFolder = projectFolder;\n\n        this.createIndexFolder();\n        this.db = new Database(this.databaseFile, {});\n\n        this.insertUrlsStmt = this.db.prepare(\"INSERT INTO urls VALUES (?, ?)\");\n        this.insertUrlsAttemptedStmt = this.db.prepare(\n            \"INSERT INTO urls_attempted VALUES (?)\"\n        );\n        this.insertUrlsPoolStmt = this.db.prepare(\n            \"INSERT INTO urls_pool VALUES (?)\"\n        );\n    }\n\n    /**\n     * Truncate and initialize the pool.\n     */\n    initUrlsPool(urls: string[]) {\n        this.db.prepare(\"DELETE FROM urls_pool\").run();\n        this.db.prepare(\"VACUUM\").run();\n        urls.forEach(url => this.insertUrlsPoolStmt.run([url]));\n    }\n\n    /**\n     * Get the number of urls in the urls pool.\n     */\n    urlsPoolSize(): number {\n        const result = this.db\n            .prepare(\"SELECT COUNT(*) as size FROM urls_pool\")\n            .get();\n        return result.size;\n    }\n\n    /**\n     * Get the number of urls found.\n     */\n    urlsSize(): number {\n        return this.db.prepare(\"SELECT COUNT(*) as size FROM urls\").get().size;\n    }\n\n    /**\n     * Add a url that needs to be crawled.\n     */\n    addPoolUrl(url: string) {\n        if (this.findAttemptedUrls(url) === 0) {\n            this.insertUrlsPoolStmt.run([url]);\n            this.insertUrlsAttemptedStmt.run([url]);\n        }\n    }\n\n    /**\n     * Add a found url.\n     */\n    addUrl(url: Url) {\n        this.insertUrlsStmt.run([url.url, url.name]);\n    }\n\n    /**\n     * Find all the urls found during the crawl.\n     */\n    findAllUrls(): Url[] {\n        return this.db.prepare(\"SELECT * FROM urls\").all();\n    }\n\n    /**\n     * Find the number of attempted urls.\n     */\n    findAttemptedUrls(url: string): number {\n        // Remove protocol and trailing slash to avoid duplicate indexing.\n        const checkUrl = url.replace(/(https|http)/i, \"\");\n        const query = `SELECT COUNT(*) as size FROM urls_attempted WHERE url='http${checkUrl}' OR url='https${checkUrl}'`;\n        const result = this.db.prepare(query).get();\n        return result.size;\n    }\n\n    /**\n     * Pop a url off the urls pools and return.\n     */\n    popPoolUrl(): string {\n        const url = this.db.prepare(\"SELECT * FROM urls_pool LIMIT 1\").get();\n        this.db.prepare(\"DELETE FROM urls_pool WHERE url = ?\").run([url.url]);\n        return url.url;\n    }\n\n    /**\n     * Creates the urls folder in the project if it doesn't exist.\n     */\n    createIndexFolder() {\n        let projectsPathUrls = join(this.projectFolder, \"urls\");\n        if (!existsSync(projectsPathUrls)) {\n            mkdirSync(projectsPathUrls);\n        }\n\n        this.databaseFile = join(projectsPathUrls, \"crawl_state.sqlite\");\n\n        if (!existsSync(this.databaseFile)) {\n            let tempDbFile = join(\n                dirname(__filename),\n                \"../Assets/crawl_state.sqlite\"\n            );\n            copyFileSync(tempDbFile, this.databaseFile);\n        }\n    }\n}\n"],"file":"SqliteCrawlStatesRepository.js"}