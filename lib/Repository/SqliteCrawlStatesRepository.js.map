{"version":3,"sources":["../../src/Repository/SqliteCrawlStatesRepository.js"],"names":["SqliteCrawlStatesRepository","constructor","projectFolder","createIndexFolder","db","Database","databaseFile","insertUrlsStmt","prepare","insertUrlsAttemptedStmt","insertUrlsPoolStmt","initUrlsPool","urls","run","forEach","url","urlsPoolSize","result","get","size","urlsSize","addPoolUrl","findAttemptedUrls","addUrl","name","findAllUrls","all","checkUrl","replace","query","popPoolUrl","projectsPathUrls","__dirname","import","meta","tempDbFile"],"mappings":"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","sourcesContent":["// @flow\nimport {existsSync, mkdirSync, copyFileSync} from \"fs\";\nimport {join, dirname} from \"path\";\nimport { fileURLToPath } from 'url';\nimport Database from \"better-sqlite3\";\n\nimport Url from \"../Model/Url.js\";\n\n\n\n/**\n * Read and write the current crawl state to file.\n */\nexport default class SqliteCrawlStatesRepository {\n    projectFolder: string;\n    databaseFile: string;\n    db: Database;\n    insertUrlsStmt: any;\n    insertUrlsAttemptedStmt: any;\n    insertUrlsPoolStmt: any;\n\n    constructor(projectFolder: string) {\n        this.projectFolder = projectFolder;\n\n        this.createIndexFolder();\n        this.db = new Database(this.databaseFile, {});\n\n        this.insertUrlsStmt = this.db.prepare(\"INSERT INTO urls VALUES (?, ?)\");\n        this.insertUrlsAttemptedStmt = this.db.prepare(\n            \"INSERT INTO urls_attempted VALUES (?)\"\n        );\n        this.insertUrlsPoolStmt = this.db.prepare(\n            \"INSERT INTO urls_pool VALUES (?)\"\n        );\n    }\n\n    /**\n     * Truncate and initialize the pool.\n     */\n    initUrlsPool(urls: string[]) {\n        this.db.prepare(\"DELETE FROM urls_pool\").run();\n        this.db.prepare(\"VACUUM\").run();\n        urls.forEach(url => this.insertUrlsPoolStmt.run([url]));\n    }\n\n    /**\n     * Get the number of urls in the urls pool.\n     */\n    urlsPoolSize(): number {\n        const result = this.db\n            .prepare(\"SELECT COUNT(*) as size FROM urls_pool\")\n            .get();\n        return result.size;\n    }\n\n    /**\n     * Get the number of urls found.\n     */\n    urlsSize(): number {\n        return this.db.prepare(\"SELECT COUNT(*) as size FROM urls\").get().size;\n    }\n\n    /**\n     * Add a url that needs to be crawled.\n     */\n    addPoolUrl(url: string) {\n        if (this.findAttemptedUrls(url) === 0) {\n            this.insertUrlsPoolStmt.run([url]);\n            this.insertUrlsAttemptedStmt.run([url]);\n        }\n    }\n\n    /**\n     * Add a found url.\n     */\n    addUrl(url: Url) {\n        this.insertUrlsStmt.run([url.url, url.name]);\n    }\n\n    /**\n     * Find all the urls found during the crawl.\n     */\n    findAllUrls(): Url[] {\n        return this.db.prepare(\"SELECT * FROM urls\").all();\n    }\n\n    /**\n     * Find the number of attempted urls.\n     */\n    findAttemptedUrls(url: string): number {\n        // Remove protocol and trailing slash to avoid duplicate indexing.\n        const checkUrl = url.replace(/(https|http)/i, \"\");\n        const query = `SELECT COUNT(*) as size FROM urls_attempted WHERE url='http${checkUrl}' OR url='https${checkUrl}'`;\n        const result = this.db.prepare(query).get();\n        return result.size;\n    }\n\n    /**\n     * Pop a url off the urls pools and return.\n     */\n    popPoolUrl(): string {\n        const url = this.db.prepare(\"SELECT * FROM urls_pool LIMIT 1\").get();\n        this.db.prepare(\"DELETE FROM urls_pool WHERE url = ?\").run([url.url]);\n        return url.url;\n    }\n\n    /**\n     * Creates the urls folder in the project if it doesn't exist.\n     */\n    createIndexFolder() {\n        let projectsPathUrls = join(this.projectFolder, \"urls\");\n        if (!existsSync(projectsPathUrls)) {\n            mkdirSync(projectsPathUrls);\n        }\n\n        this.databaseFile = join(projectsPathUrls, \"crawl_state.sqlite\");\n\n        if (!existsSync(this.databaseFile)) {\n            const __dirname = dirname(fileURLToPath(import.meta.url));\n            let tempDbFile = join(__dirname, '..', '..', \"src\", \"Assets\", \"crawl_state.sqlite\");\n            copyFileSync(tempDbFile, this.databaseFile);\n        }\n    }\n}\n"],"file":"SqliteCrawlStatesRepository.js"}