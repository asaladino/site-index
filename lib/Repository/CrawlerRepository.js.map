{"version":3,"sources":["../../src/Repository/CrawlerRepository.js"],"names":["CrawlerRepository","constructor","args","option","initialUrl","domain","findAllUrls","progress","crawlStatesRepository","urlsPoolSize","addPoolUrl","browser","puppeteer","launch","ignoreHTTPSErrors","headless","page","newPage","setJavaScriptEnabled","Promise","resolve","crawlNextUrl","processPage","url","goto","waitForRender","index","waitFor","response","content","mainFrame","headers","html","close","cleanUrl","popPoolUrl","then","data","newUrl","Url","addUrl","urlsSize","Progress","isSingle","links","$$","linkHandle","href","evaluate","link","foundUrl","isFreshUrl","catch","urls","findAttemptedUrls","isInDomain","isNotExclusion","isNotRecursive","isNotDocument","UrlParser","parse","path","exclusion","exclusions","startsWith","endsWith","uri","replace","split","entries","splice","length","entry","found","filter","e"],"mappings":"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","sourcesContent":["// @flow\nimport UrlParser from \"url\";\nimport axios from 'axios';\n\nimport Progress from \"../Model/Progress\";\nimport Url from \"../Model/Url\";\nimport Args from \"../Model/Args\";\nimport Option from \"../Model/Option\";\n\nimport SqliteCrawlStatesRepository from \"./SqliteCrawlStatesRepository\";\nimport puppeteer from \"puppeteer\";\n\n/**\n * This crawler repository will use a domain name as a data-source and extract urls from it.\n */\nexport default class CrawlerRepository {\n    /**\n     * The initial sitemap url.\n     */\n    initialUrl: string;\n    /**\n     * Arguments passed to the app from the user.\n     */\n    args: Args;\n    /**\n     * Options loaded for the crawl.\n     */\n    option: Option;\n    /**\n     * Repository to access the crawl state.\n     */\n    crawlStatesRepository: SqliteCrawlStatesRepository;\n    progress: (Progress) => void;\n    resolve: any;\n    browser: any;\n    page: any;\n\n    /**\n     * Build a sitemap repository\n     */\n    constructor(args: Args, option: Option) {\n        this.initialUrl = `http://${args.domain}/`;\n        this.args = args;\n        this.option = option;\n    }\n\n    /**\n     * Find all the urls on a site.\n     */\n    async findAllUrls(progress: (Progress) => void): Promise<any> {\n        this.progress = progress;\n        if (this.crawlStatesRepository.urlsPoolSize() === 0) {\n            this.crawlStatesRepository.addPoolUrl(this.initialUrl);\n        }\n        this.browser = await puppeteer.launch({ignoreHTTPSErrors: true, headless: true});\n        this.page = await this.browser.newPage();\n        this.page.setJavaScriptEnabled(true);\n        return new Promise<Url[]>(resolve => {\n            this.resolve = resolve;\n            this.crawlNextUrl();\n        });\n    }\n\n    /**\n     * Goto the page and get the html contents of the page.\n     * @param url of the page.\n     * @returns {Promise<void>}\n     */\n    async processPage(url: string) {\n        await this.page.goto(url, {\"waitUntil\": \"networkidle2\"});\n        const {waitForRender} = this.option.index;\n        if (waitForRender) {\n            await this.page.waitFor(waitForRender);\n        }\n        const response = await axios(url);\n        const content = await this.page.mainFrame().content();\n        return {\n            headers: response.headers,\n            html: content\n        }\n    }\n\n    /**\n     * Gets the page, if there are more pages it will add them to the list\n     * else, just adds the urls to the urls array.\n     */\n    crawlNextUrl() {\n        const urlsPoolSize = this.crawlStatesRepository.urlsPoolSize();\n        if (urlsPoolSize === 0) {\n            this.browser.close();\n            return this.resolve(this.crawlStatesRepository.findAllUrls());\n        }\n        let url = CrawlerRepository.cleanUrl(\n            this.crawlStatesRepository.popPoolUrl()\n        );\n        this.processPage(url).then(async data => {\n            const newUrl = new Url(url);\n            this.crawlStatesRepository.addUrl(newUrl);\n            const urlsSize = this.crawlStatesRepository.urlsSize();\n            this.progress(\n                new Progress(newUrl, data.html, data.headers, urlsSize, urlsPoolSize - 1)\n            );\n            if (this.args.isSingle()) {\n                this.resolve(this.crawlStatesRepository.findAllUrls());\n            } else {\n                const links = await this.page.$$(\"a\");\n                for (let linkHandle of links) {\n                    const href = await this.page.evaluate(link => link.href, linkHandle);\n                    let foundUrl = CrawlerRepository.cleanUrl(href);\n                    if (this.isFreshUrl(foundUrl)) {\n                        this.crawlStatesRepository.addPoolUrl(foundUrl);\n                    }\n                }\n                this.crawlNextUrl();\n            }\n        }).catch(() => {\n            this.crawlNextUrl();\n        });\n    }\n\n    /**\n     * Has the url been crawled before?\n     * @returns {boolean} true if the url has not been attempted.\n     */\n    isFreshUrl(url: string) {\n        const urls = this.crawlStatesRepository.findAttemptedUrls(url);\n        return (\n            urls === 0 &&\n            this.isInDomain(url) &&\n            this.isNotExclusion(url) &&\n            CrawlerRepository.isNotRecursive(url) &&\n            CrawlerRepository.isNotDocument(url)\n        );\n    }\n\n    /**\n     * Check to see if the url should be excluded.\n     */\n    isNotExclusion(url: string): boolean {\n        let {path} = UrlParser.parse(url);\n        for (let exclusion of this.option.index.exclusions) {\n            if (path.startsWith(exclusion)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * This crawler only crawls html pages so make sure it is not something else.\n     * The next version will handle every document type.\n     */\n    static isNotDocument(url: string): boolean {\n        return (\n            !url.endsWith(\".pdf\") &&\n            !url.endsWith(\".jpg\") &&\n            !url.endsWith(\".png\") &&\n            !url.endsWith(\".gif\") &&\n            !url.endsWith(\".doc\")\n        );\n    }\n\n    /**\n     * Some sites I have crawled urls that are recursive and grow without a 404 being thrown. This\n     * method attempts to avoid those pages.\n     */\n    static isNotRecursive(url: string): boolean {\n        let uri = url.replace(/(https|http):/i, \"\").split(\"/\");\n        const entries = uri.splice(3, uri.length);\n        for (let entry of entries) {\n            const found = entries.filter(e => e === entry).length;\n            if (found > 1) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * The index will only crawl urls on the given domain.\n     */\n    isInDomain(url: string): boolean {\n        return url\n            .replace(/(https|http):/i, \"\")\n            .startsWith(\"//\" + this.args.domain);\n    }\n\n    /**\n     * Remove url params and hashes. They can lead to recursion.\n     */\n    static cleanUrl(url: string): string {\n        return url.split(\"?\")[0].split(\"#\")[0];\n    }\n}\n"],"file":"CrawlerRepository.js"}