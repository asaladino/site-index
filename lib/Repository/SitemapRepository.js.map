{"version":3,"sources":["../../src/Repository/SitemapRepository.js"],"names":["SitemapRepository","constructor","initialSitemap","initialUrl","sitemaps","urls","findAllPages","progress","length","push","Promise","resolve","reject","parseSiteMap","url","pop","Progress","Url","done","res","xml","getBody","err","result","forEach","entry"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,iBAAN,CAAwB;AACrC;;;;AAIA;;;;AAIA;;;;AAWA;;;AAGAC,EAAAA,WAAW,CAACC,cAAD,EAAyB;AAClC,SAAKC,UAAL,GAAkBD,cAAlB;AACA,SAAKE,QAAL,GAAgB,EAAhB;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;AAED;;;;;AAGAC,EAAAA,YAAY,CAACC,QAAD,EAA6C;AACvD,SAAKA,QAAL,GAAgBA,QAAhB;;AACA,QAAI,KAAKH,QAAL,CAAcI,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,WAAKJ,QAAL,CAAcK,IAAd,CAAmB,KAAKN,UAAxB;AACD;;AACD,WAAO,IAAIO,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,WAAKD,OAAL,GAAeA,OAAf;AACA,WAAKC,MAAL,GAAcA,MAAd;AACA,WAAKC,YAAL;AACD,KAJM,CAAP;AAKD;AAED;;;;;;AAIAA,EAAAA,YAAY,GAAG;AACb,QAAIC,GAAG,GAAG,KAAKV,QAAL,CAAcW,GAAd,EAAV;AACA,SAAKR,QAAL,CAAc,IAAIS,iBAAJ,CAAa,IAAIC,YAAJ,CAAQH,GAAR,CAAb,EAA2B,IAA3B,EAAiC,KAAKV,QAAL,CAAcI,MAA/C,EAAuD,KAAKH,IAAL,CAAUG,MAAjE,CAAd;AACA,8BAAQ,KAAR,EAAeM,GAAf,EAAoBI,IAApB,CAAyBC,GAAG,IAAI;AAC9B,UAAIC,GAAG,GAAGD,GAAG,CAACE,OAAJ,CAAY,MAAZ,CAAV;AACA,+BAAYD,GAAZ,EAAiB,CAACE,GAAD,EAAMC,MAAN,KAAiB;AAChC,YAAIA,MAAM,CAAC,QAAD,CAAV,EAAsB;AACpBA,UAAAA,MAAM,CAAC,QAAD,CAAN,CAAiB,KAAjB,EAAwBC,OAAxB,CAAgCC,KAAK,IAAI;AACvC,gBAAIX,GAAG,GAAG,IAAIG,YAAJ,CAAQQ,KAAK,CAAC,KAAD,CAAL,CAAa,CAAb,CAAR,CAAV;AACA,iBAAKpB,IAAL,CAAUI,IAAV,CAAeK,GAAf;AACD,WAHD;;AAIA,cAAI,KAAKV,QAAL,CAAcI,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,iBAAKG,OAAL,CAAa,KAAKN,IAAlB;AACD,WAFD,MAEO;AACL,iBAAKQ,YAAL;AACD;AACF;;AACD,YAAIU,MAAM,CAAC,cAAD,CAAV,EAA4B;AAC1BA,UAAAA,MAAM,CAAC,cAAD,CAAN,CAAuB,SAAvB,EAAkCC,OAAlC,CAA0CC,KAAK,IAAI;AACjD,iBAAKrB,QAAL,CAAcK,IAAd,CAAmBgB,KAAK,CAAC,KAAD,CAAL,CAAa,CAAb,CAAnB;AACD,WAFD;AAGA,eAAKZ,YAAL;AACD;AACF,OAlBD;AAmBD,KArBD;AAsBD;;AAzEoC","sourcesContent":["// @flow\r\nimport request from \"then-request\";\r\nimport { parseString } from \"xml2js\";\r\nimport Progress from \"../Model/Progress\";\r\nimport Url from \"../Model/Url\";\r\n\r\n/**\r\n * Get all the urls from the sitemaps.\r\n */\r\nexport default class SitemapRepository {\r\n  /**\r\n   * The initial sitemap url.\r\n   */\r\n  initialUrl: string;\r\n  /**\r\n   * Array of the site maps to search. This list gets popped and will be empty.\r\n   */\r\n  sitemaps: string[];\r\n  /**\r\n   * Array of all the urls found.\r\n   */\r\n  urls: Url[];\r\n\r\n  progress: Progress => void;\r\n\r\n  resolve: (Url[]) => void;\r\n\r\n  reject: () => void;\r\n\r\n  /**\r\n   * Build a sitemap repository\r\n   */\r\n  constructor(initialSitemap: string) {\r\n    this.initialUrl = initialSitemap;\r\n    this.sitemaps = [];\r\n    this.urls = [];\r\n  }\r\n\r\n  /**\r\n   * Find all the urls on a sitemap.\r\n   */\r\n  findAllPages(progress: Progress => void): Promise<Url[]> {\r\n    this.progress = progress;\r\n    if (this.sitemaps.length === 0) {\r\n      this.sitemaps.push(this.initialUrl);\r\n    }\r\n    return new Promise((resolve, reject) => {\r\n      this.resolve = resolve;\r\n      this.reject = reject;\r\n      this.parseSiteMap();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Gets the sitemap, if there are more sitemaps it will add them to the list\r\n   * else, just adds the urls to the urls array.\r\n   */\r\n  parseSiteMap() {\r\n    let url = this.sitemaps.pop();\r\n    this.progress(new Progress(new Url(url), null, this.sitemaps.length, this.urls.length));\r\n    request(\"GET\", url).done(res => {\r\n      let xml = res.getBody(\"utf8\");\r\n      parseString(xml, (err, result) => {\r\n        if (result[\"urlset\"]) {\r\n          result[\"urlset\"][\"url\"].forEach(entry => {\r\n            let url = new Url(entry[\"loc\"][0]);\r\n            this.urls.push(url);\r\n          });\r\n          if (this.sitemaps.length === 0) {\r\n            this.resolve(this.urls);\r\n          } else {\r\n            this.parseSiteMap();\r\n          }\r\n        }\r\n        if (result[\"sitemapindex\"]) {\r\n          result[\"sitemapindex\"][\"sitemap\"].forEach(entry => {\r\n            this.sitemaps.push(entry[\"loc\"][0]);\r\n          });\r\n          this.parseSiteMap();\r\n        }\r\n      });\r\n    });\r\n  }\r\n}\r\n"],"file":"SitemapRepository.js"}