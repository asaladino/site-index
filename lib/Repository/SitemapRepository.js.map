{"version":3,"sources":["../../src/Repository/SitemapRepository.js"],"names":["SitemapRepository","constructor","initialSitemap","initialUrl","sitemaps","urls","findAllPages","progress","length","push","Promise","resolve","reject","parseSiteMap","url","pop","Progress","Url","done","res","xml","getBody","err","result","forEach","entry"],"mappings":"6FACA,iEACA,8BACA,mEACA,yD,kFAEA;;GAGe,KAAMA,CAAAA,iBAAkB,CACnC;;OADmC,CAKnC;;OALmC,CASnC;;OATmC,CAoBnC;;OAGAC,WAAW,CAACC,cAAD,CAAyB,CAChC,KAAKC,UAAL,CAAkBD,cAAlB,CACA,KAAKE,QAAL,CAAgB,EAAhB,CACA,KAAKC,IAAL,CAAY,EACf,CAED;;OAGAC,YAAY,CAACC,QAAD,CAA6C,CACrD,KAAKA,QAAL,CAAgBA,QAAhB,CACA,GAAI,KAAKH,QAAL,CAAcI,MAAd,GAAyB,CAA7B,CAAgC,CAC5B,KAAKJ,QAAL,CAAcK,IAAd,CAAmB,KAAKN,UAAxB,CACH,CACD,MAAO,IAAIO,CAAAA,OAAJ,CAAY,CAACC,OAAD,CAAUC,MAAV,GAAqB,CACpC,KAAKD,OAAL,CAAeA,OAAf,CACA,KAAKC,MAAL,CAAcA,MAAd,CACA,KAAKC,YAAL,EACH,CAJM,CAKV,CAED;;;OAIAA,YAAY,EAAG,CACX,GAAIC,CAAAA,GAAG,CAAG,KAAKV,QAAL,CAAcW,GAAd,EAAV,CACA,KAAKR,QAAL,CAAc,GAAIS,kBAAJ,CAAa,GAAIC,aAAJ,CAAQH,GAAR,CAAb,CAA2B,IAA3B,CAAiC,KAAKV,QAAL,CAAcI,MAA/C,CAAuD,KAAKH,IAAL,CAAUG,MAAjE,CAAd,EACA,yBAAQ,KAAR,CAAeM,GAAf,EAAoBI,IAApB,CAAyBC,GAAG,EAAI,CAC5B,GAAIC,CAAAA,GAAG,CAAGD,GAAG,CAACE,OAAJ,CAAY,MAAZ,CAAV,CACA,wBAAYD,GAAZ,CAAiB,CAACE,GAAD,CAAMC,MAAN,GAAiB,CAC9B,GAAIA,MAAM,CAAC,QAAD,CAAV,CAAsB,CAClBA,MAAM,CAAC,QAAD,CAAN,CAAiB,KAAjB,EAAwBC,OAAxB,CAAgCC,KAAK,EAAI,CACrC,GAAIX,CAAAA,GAAG,CAAG,GAAIG,aAAJ,CAAQQ,KAAK,CAAC,KAAD,CAAL,CAAa,CAAb,CAAR,CAAV,CACA,KAAKpB,IAAL,CAAUI,IAAV,CAAeK,GAAf,CACH,CAHD,EAIA,GAAI,KAAKV,QAAL,CAAcI,MAAd,GAAyB,CAA7B,CAAgC,CAC5B,KAAKG,OAAL,CAAa,KAAKN,IAAlB,CACH,CAFD,IAEO,CACH,KAAKQ,YAAL,EACH,CACJ,CACD,GAAIU,MAAM,CAAC,cAAD,CAAV,CAA4B,CACxBA,MAAM,CAAC,cAAD,CAAN,CAAuB,SAAvB,EAAkCC,OAAlC,CAA0CC,KAAK,EAAI,CAC/C,KAAKrB,QAAL,CAAcK,IAAd,CAAmBgB,KAAK,CAAC,KAAD,CAAL,CAAa,CAAb,CAAnB,CACH,CAFD,EAGA,KAAKZ,YAAL,EACH,CACJ,CAlBD,CAmBH,CArBD,CAsBH,CAzEkC,C","sourcesContent":["// @flow\r\nimport request from \"then-request\";\r\nimport {parseString} from \"xml2js\";\r\nimport Progress from \"../Model/Progress\";\r\nimport Url from \"../Model/Url\";\r\n\r\n/**\r\n * Get all the urls from the sitemaps.\r\n */\r\nexport default class SitemapRepository {\r\n    /**\r\n     * The initial sitemap url.\r\n     */\r\n    initialUrl: string;\r\n    /**\r\n     * Array of the site maps to search. This list gets popped and will be empty.\r\n     */\r\n    sitemaps: string[];\r\n    /**\r\n     * Array of all the urls found.\r\n     */\r\n    urls: Url[];\r\n\r\n    progress: Progress => void;\r\n\r\n    resolve: (Url[]) => void;\r\n\r\n    reject: () => void;\r\n\r\n    /**\r\n     * Build a sitemap repository\r\n     */\r\n    constructor(initialSitemap: string) {\r\n        this.initialUrl = initialSitemap;\r\n        this.sitemaps = [];\r\n        this.urls = [];\r\n    }\r\n\r\n    /**\r\n     * Find all the urls on a sitemap.\r\n     */\r\n    findAllPages(progress: Progress => void): Promise<Url[]> {\r\n        this.progress = progress;\r\n        if (this.sitemaps.length === 0) {\r\n            this.sitemaps.push(this.initialUrl);\r\n        }\r\n        return new Promise((resolve, reject) => {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n            this.parseSiteMap();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Gets the sitemap, if there are more sitemaps it will add them to the list\r\n     * else, just adds the urls to the urls array.\r\n     */\r\n    parseSiteMap() {\r\n        let url = this.sitemaps.pop();\r\n        this.progress(new Progress(new Url(url), null, this.sitemaps.length, this.urls.length));\r\n        request(\"GET\", url).done(res => {\r\n            let xml = res.getBody(\"utf8\");\r\n            parseString(xml, (err, result) => {\r\n                if (result[\"urlset\"]) {\r\n                    result[\"urlset\"][\"url\"].forEach(entry => {\r\n                        let url = new Url(entry[\"loc\"][0]);\r\n                        this.urls.push(url);\r\n                    });\r\n                    if (this.sitemaps.length === 0) {\r\n                        this.resolve(this.urls);\r\n                    } else {\r\n                        this.parseSiteMap();\r\n                    }\r\n                }\r\n                if (result[\"sitemapindex\"]) {\r\n                    result[\"sitemapindex\"][\"sitemap\"].forEach(entry => {\r\n                        this.sitemaps.push(entry[\"loc\"][0]);\r\n                    });\r\n                    this.parseSiteMap();\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n"],"file":"SitemapRepository.js"}