{"version":3,"sources":["../../src/Service/Service.js"],"names":["Service","constructor","args","events","Map","optionsRepository","OptionsRepository","option","getOption","on","event","callback","set","emitProgress","progress","forEach","emitComplete","getProjectPath","siteName","getSiteName","projectPath","output","filename","getUrlsPath","urlsPath","getPathJsonUrlsFile"],"mappings":"6FACA,sBACA,0BAEA,0FACA,2DACA,+DACA,mE,kFAEA;;GAGe,KAAMA,CAAAA,OAAQ,CACzB;;OADyB,CAKzB;;OALyB,CASzB;;OATyB,CAczB;;OAGAC,WAAW,CAACC,IAAD,CAAa,CACpB,KAAKA,IAAL,CAAYA,IAAZ,CACA,KAAKC,MAAL,CAAc,GAAIC,CAAAA,GAAlB,CACA,KAAMC,CAAAA,iBAAiB,CAAG,GAAIC,2BAAJ,CAAsB,KAAKJ,IAA3B,CAA1B,CACA,KAAKK,MAAL,CAAcF,iBAAiB,CAACG,SAAlB,EACjB,CAED;;;;;OAMAC,EAAE,CAACC,KAAD,CAAgBC,QAAhB,CAA6C,CAC3C,KAAKR,MAAL,CAAYS,GAAZ,CAAgBF,KAAhB,CAAuBC,QAAvB,EACA,MAAO,KACV,CAED;;;OAIAE,YAAY,CAACC,QAAD,CAAqB,CAC7B,KAAKX,MAAL,CAAYY,OAAZ,CAAoB,CAACJ,QAAD,CAAWD,KAAX,GAAqB,CACrC,GAAIA,KAAK,GAAK,UAAd,CAA0B,CACtBC,QAAQ,CAACG,QAAD,CACX,CACJ,CAJD,CAKH,CAED;;OAGAE,YAAY,EAAG,CACX,KAAKb,MAAL,CAAYY,OAAZ,CAAoB,CAACJ,QAAD,CAAWD,KAAX,GAAqB,CACrC,GAAIA,KAAK,GAAK,UAAd,CAA0B,CACtBC,QAAQ,EACX,CACJ,CAJD,CAKH,CAED;;OAGAM,cAAc,EAAW,CACrB,GAAIC,CAAAA,QAAQ,CAAG,KAAKhB,IAAL,CAAUiB,WAAV,EAAf,CACA,GAAIC,CAAAA,WAAW,CAAG,eAAK,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBC,QAAtB,CAAgCJ,QAAhC,CAAlB,CACA,GAAI,CAAC,mBAAWE,WAAX,CAAL,CAA8B,CAC1B,kBAAUA,WAAV,CACH,CACD,MAAOA,CAAAA,WACV,CAED;;OAGAG,WAAW,EAAW,CAClB,GAAIC,CAAAA,QAAQ,CAAG,eAAK,KAAKP,cAAL,EAAL,CAA4B,MAA5B,CAAf,CACA,GAAI,CAAC,mBAAWO,QAAX,CAAL,CAA2B,CACvB,kBAAUA,QAAV,CACH,CACD,MAAOA,CAAAA,QACV,CAED;;OAGAC,mBAAmB,EAAW,CAC1B,MAAO,eAAK,KAAKF,WAAL,EAAL,CAAyB,WAAzB,CACV,CAtFwB,C","sourcesContent":["// @flow\nimport {existsSync, mkdirSync} from \"fs\";\nimport {join} from \"path\";\n\nimport OptionsRepository from \"../Repository/OptionsRepository\";\nimport Args from \"../Model/Args\";\nimport Option from \"../Model/Option\";\nimport Progress from \"../Model/Progress\";\n\n/**\n * Base service will events and project folder information.\n */\nexport default class Service {\n    /**\n     * Received from the user.\n     */\n    args: Args;\n    /**\n     * Events emitted by the services.\n     */\n    events: Map<string, Function>;\n    /**\n     * Options loaded for the crawl.\n     */\n    option: Option;\n\n    /**\n     * Build a service with some arguments.\n     */\n    constructor(args: Args) {\n        this.args = args;\n        this.events = new Map();\n        const optionsRepository = new OptionsRepository(this.args);\n        this.option = optionsRepository.getOption();\n    }\n\n    /**\n     * Added an event watcher.\n     * @param event {string} name of the event.\n     *  options: progress,complete\n     * @param callback {Function} when an event is emitted.\n     */\n    on(event: string, callback: function): Service {\n        this.events.set(event, callback);\n        return this;\n    }\n\n    /**\n     * Emit the progress of the service.\n     * @param progress {Progress} of the service.\n     */\n    emitProgress(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === \"progress\") {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emit that the service has completed it's job.\n     */\n    emitComplete() {\n        this.events.forEach((callback, event) => {\n            if (event === \"complete\") {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Get the full path to the project folder, which is the output folder + domain striped.\n     */\n    getProjectPath(): string {\n        let siteName = this.args.getSiteName();\n        let projectPath = join(this.args.output.filename, siteName);\n        if (!existsSync(projectPath)) {\n            mkdirSync(projectPath);\n        }\n        return projectPath;\n    }\n\n    /**\n     * Get the full path to the urls folder, which is the project path + urls.\n     */\n    getUrlsPath(): string {\n        let urlsPath = join(this.getProjectPath(), \"urls\");\n        if (!existsSync(urlsPath)) {\n            mkdirSync(urlsPath);\n        }\n        return urlsPath;\n    }\n\n    /**\n     * Get the path to the urls.json file.\n     */\n    getPathJsonUrlsFile(): string {\n        return join(this.getUrlsPath(), \"urls.json\");\n    }\n}\n"],"file":"Service.js"}