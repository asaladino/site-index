{"version":3,"sources":["../../src/Service/Service.js"],"names":["Service","constructor","args","events","Map","optionsRepository","OptionsRepository","option","getOption","on","event","callback","set","emitProgress","progress","forEach","emitComplete","getProjectPath","siteName","getSiteName","projectPath","output","filename","getUrlsPath","urlsPath","getPathJsonUrlsFile"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,OAAN,CAAc;AAC3B;;;;AAIA;;;;AAIA;;;;AAKA;;;AAGAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACtB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,UAAMC,iBAAiB,GAAG,IAAIC,0BAAJ,CAAsB,KAAKJ,IAA3B,CAA1B;AACA,SAAKK,MAAL,GAAcF,iBAAiB,CAACG,SAAlB,EAAd;AACD;AAED;;;;;;;;AAMAC,EAAAA,EAAE,CAACC,KAAD,EAAgBC,QAAhB,EAA6C;AAC7C,SAAKR,MAAL,CAAYS,GAAZ,CAAgBF,KAAhB,EAAuBC,QAAvB;AACA,WAAO,IAAP;AACD;AAED;;;;;;AAIAE,EAAAA,YAAY,CAACC,QAAD,EAAqB;AAC/B,SAAKX,MAAL,CAAYY,OAAZ,CAAoB,CAACJ,QAAD,EAAWD,KAAX,KAAqB;AACvC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACxBC,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACD;AACF,KAJD;AAKD;AAED;;;;;AAGAE,EAAAA,YAAY,GAAG;AACb,SAAKb,MAAL,CAAYY,OAAZ,CAAoB,CAACJ,QAAD,EAAWD,KAAX,KAAqB;AACvC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACxBC,QAAAA,QAAQ;AACT;AACF,KAJD;AAKD;AAED;;;;;AAGAM,EAAAA,cAAc,GAAW;AACvB,QAAIC,QAAQ,GAAG,KAAKhB,IAAL,CAAUiB,WAAV,EAAf;AACA,QAAIC,WAAW,GAAG,gBAAK,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBC,QAAtB,EAAgCJ,QAAhC,CAAlB;;AACA,QAAI,CAAC,oBAAWE,WAAX,CAAL,EAA8B;AAC5B,yBAAUA,WAAV;AACD;;AACD,WAAOA,WAAP;AACD;AAED;;;;;AAGAG,EAAAA,WAAW,GAAW;AACpB,QAAIC,QAAQ,GAAG,gBAAK,KAAKP,cAAL,EAAL,EAA4B,MAA5B,CAAf;;AACA,QAAI,CAAC,oBAAWO,QAAX,CAAL,EAA2B;AACzB,yBAAUA,QAAV;AACD;;AACD,WAAOA,QAAP;AACD;AAED;;;;;AAGAC,EAAAA,mBAAmB,GAAW;AAC5B,WAAO,gBAAK,KAAKF,WAAL,EAAL,EAAyB,WAAzB,CAAP;AACD;;AAtF0B","sourcesContent":["// @flow\r\nimport { existsSync, mkdirSync } from \"fs\";\r\nimport { join } from \"path\";\r\n\r\nimport OptionsRepository from \"../Repository/OptionsRepository\";\r\nimport Args from \"../Model/Args\";\r\nimport Option from \"../Model/Option\";\r\nimport Progress from \"../Model/Progress\";\r\n\r\n/**\r\n * Base service will events and project folder information.\r\n */\r\nexport default class Service {\r\n  /**\r\n   * Received from the user.\r\n   */\r\n  args: Args;\r\n  /**\r\n   * Events emitted by the services.\r\n   */\r\n  events: Map<string, Function>;\r\n  /**\r\n   * Options loaded for the crawl.\r\n   */\r\n  option: Option;\r\n\r\n  /**\r\n   * Build a service with some arguments.\r\n   */\r\n  constructor(args: Args) {\r\n    this.args = args;\r\n    this.events = new Map();\r\n    const optionsRepository = new OptionsRepository(this.args);\r\n    this.option = optionsRepository.getOption();\r\n  }\r\n\r\n  /**\r\n   * Added an event watcher.\r\n   * @param event {string} name of the event.\r\n   *  options: progress,complete\r\n   * @param callback {Function} when an event is emitted.\r\n   */\r\n  on(event: string, callback: function): Service {\r\n    this.events.set(event, callback);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Emit the progress of the service.\r\n   * @param progress {Progress} of the service.\r\n   */\r\n  emitProgress(progress: Progress) {\r\n    this.events.forEach((callback, event) => {\r\n      if (event === \"progress\") {\r\n        callback(progress);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit that the service has completed it's job.\r\n   */\r\n  emitComplete() {\r\n    this.events.forEach((callback, event) => {\r\n      if (event === \"complete\") {\r\n        callback();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the full path to the project folder, which is the output folder + domain striped.\r\n   */\r\n  getProjectPath(): string {\r\n    let siteName = this.args.getSiteName();\r\n    let projectPath = join(this.args.output.filename, siteName);\r\n    if (!existsSync(projectPath)) {\r\n      mkdirSync(projectPath);\r\n    }\r\n    return projectPath;\r\n  }\r\n\r\n  /**\r\n   * Get the full path to the urls folder, which is the project path + urls.\r\n   */\r\n  getUrlsPath(): string {\r\n    let urlsPath = join(this.getProjectPath(), \"urls\");\r\n    if (!existsSync(urlsPath)) {\r\n      mkdirSync(urlsPath);\r\n    }\r\n    return urlsPath;\r\n  }\r\n\r\n  /**\r\n   * Get the path to the urls.json file.\r\n   */\r\n  getPathJsonUrlsFile(): string {\r\n    return join(this.getUrlsPath(), \"urls.json\");\r\n  }\r\n}\r\n"],"file":"Service.js"}