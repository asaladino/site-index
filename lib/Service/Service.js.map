{"version":3,"sources":["../../src/Service/Service.js"],"names":["Service","constructor","args","events","Map","optionsRepository","OptionsRepository","option","getOption","on","event","callback","set","emitProgress","progress","forEach","emitComplete","getProjectPath","siteName","getSiteName","projectPath","output","filename","getUrlsPath","urlsPath","getPathJsonUrlsFile"],"mappings":";;;;;;;AACA;;AACA;;AAEA;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,OAAN,CAAc;AACzB;;;;AAIA;;;;AAIA;;;;AAKA;;;AAGAC,EAAAA,WAAW,CAACC,IAAD,EAAa;AACpB,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,UAAMC,iBAAiB,GAAG,IAAIC,0BAAJ,CAAsB,KAAKJ,IAA3B,CAA1B;AACA,SAAKK,MAAL,GAAcF,iBAAiB,CAACG,SAAlB,EAAd;AACH;AAED;;;;;;;;AAMAC,EAAAA,EAAE,CAACC,KAAD,EAAgBC,QAAhB,EAA6C;AAC3C,SAAKR,MAAL,CAAYS,GAAZ,CAAgBF,KAAhB,EAAuBC,QAAvB;AACA,WAAO,IAAP;AACH;AAED;;;;;;AAIAE,EAAAA,YAAY,CAACC,QAAD,EAAqB;AAC7B,SAAKX,MAAL,CAAYY,OAAZ,CAAoB,CAACJ,QAAD,EAAWD,KAAX,KAAqB;AACrC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACtBC,QAAAA,QAAQ,CAACG,QAAD,CAAR;AACH;AACJ,KAJD;AAKH;AAED;;;;;AAGAE,EAAAA,YAAY,GAAG;AACX,SAAKb,MAAL,CAAYY,OAAZ,CAAoB,CAACJ,QAAD,EAAWD,KAAX,KAAqB;AACrC,UAAIA,KAAK,KAAK,UAAd,EAA0B;AACtBC,QAAAA,QAAQ;AACX;AACJ,KAJD;AAKH;AAED;;;;;AAGAM,EAAAA,cAAc,GAAW;AACrB,QAAIC,QAAQ,GAAG,KAAKhB,IAAL,CAAUiB,WAAV,EAAf;AACA,QAAIC,WAAW,GAAG,gBAAK,KAAKlB,IAAL,CAAUmB,MAAV,CAAiBC,QAAtB,EAAgCJ,QAAhC,CAAlB;;AACA,QAAI,CAAC,oBAAWE,WAAX,CAAL,EAA8B;AAC1B,yBAAUA,WAAV;AACH;;AACD,WAAOA,WAAP;AACH;AAED;;;;;AAGAG,EAAAA,WAAW,GAAW;AAClB,QAAIC,QAAQ,GAAG,gBAAK,KAAKP,cAAL,EAAL,EAA4B,MAA5B,CAAf;;AACA,QAAI,CAAC,oBAAWO,QAAX,CAAL,EAA2B;AACvB,yBAAUA,QAAV;AACH;;AACD,WAAOA,QAAP;AACH;AAED;;;;;AAGAC,EAAAA,mBAAmB,GAAW;AAC1B,WAAO,gBAAK,KAAKF,WAAL,EAAL,EAAyB,WAAzB,CAAP;AACH;;AAtFwB","sourcesContent":["// @flow\nimport {existsSync, mkdirSync} from \"fs\";\nimport {join} from \"path\";\n\nimport OptionsRepository from \"../Repository/OptionsRepository.js\";\nimport Args from \"../Model/Args.js\";\nimport Option from \"../Model/Option.js\";\nimport Progress from \"../Model/Progress.js\";\n\n/**\n * Base service will events and project folder information.\n */\nexport default class Service {\n    /**\n     * Received from the user.\n     */\n    args: Args;\n    /**\n     * Events emitted by the services.\n     */\n    events: Map<string, Function>;\n    /**\n     * Options loaded for the crawl.\n     */\n    option: Option;\n\n    /**\n     * Build a service with some arguments.\n     */\n    constructor(args: Args) {\n        this.args = args;\n        this.events = new Map();\n        const optionsRepository = new OptionsRepository(this.args);\n        this.option = optionsRepository.getOption();\n    }\n\n    /**\n     * Added an event watcher.\n     * @param event {string} name of the event.\n     *  options: progress,complete\n     * @param callback {Function} when an event is emitted.\n     */\n    on(event: string, callback: function): Service {\n        this.events.set(event, callback);\n        return this;\n    }\n\n    /**\n     * Emit the progress of the service.\n     * @param progress {Progress} of the service.\n     */\n    emitProgress(progress: Progress) {\n        this.events.forEach((callback, event) => {\n            if (event === \"progress\") {\n                callback(progress);\n            }\n        });\n    }\n\n    /**\n     * Emit that the service has completed it's job.\n     */\n    emitComplete() {\n        this.events.forEach((callback, event) => {\n            if (event === \"complete\") {\n                callback();\n            }\n        });\n    }\n\n    /**\n     * Get the full path to the project folder, which is the output folder + domain striped.\n     */\n    getProjectPath(): string {\n        let siteName = this.args.getSiteName();\n        let projectPath = join(this.args.output.filename, siteName);\n        if (!existsSync(projectPath)) {\n            mkdirSync(projectPath);\n        }\n        return projectPath;\n    }\n\n    /**\n     * Get the full path to the urls folder, which is the project path + urls.\n     */\n    getUrlsPath(): string {\n        let urlsPath = join(this.getProjectPath(), \"urls\");\n        if (!existsSync(urlsPath)) {\n            mkdirSync(urlsPath);\n        }\n        return urlsPath;\n    }\n\n    /**\n     * Get the path to the urls.json file.\n     */\n    getPathJsonUrlsFile(): string {\n        return join(this.getUrlsPath(), \"urls.json\");\n    }\n}\n"],"file":"Service.js"}