{"version":3,"sources":["../../src/Model/Args.js"],"names":["Args","constructor","params","type","verbose","Object","assign","shouldShowHelp","hasOwnProperty","domain","output","isCrawl","isSingle","getSingleUrl","uri","getSiteName","replace","getProjectPath","siteName","projectPath","filename"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,IAAN,CAAW;AACtB;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;AAKAC,EAAAA,WAAW,CAACC,MAAD,EAAc;AACrB,SAAKC,IAAL,GAAY,OAAZ;AACA,SAAKC,OAAL,GAAe,IAAf;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBJ,MAApB;AACH;AAED;;;;;;AAIAK,EAAAA,cAAc,GAAY;AACtB,WACI,KAAKC,cAAL,CAAoB,MAApB,KACC,KAAKC,MAAL,IAAe,IAAf,IAAuB,KAAKC,MAAL,IAAe,IAF3C;AAIH;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAY;AACf,WAAO,KAAKR,IAAL,KAAc,OAArB;AACH;AAED;;;;;;AAIAS,EAAAA,QAAQ,GAAY;AAChB,WAAO,KAAKT,IAAL,KAAc,QAArB;AACH;AAED;;;;;;AAIAU,EAAAA,YAAY,GAAY;AACpB,QAAI,KAAKC,GAAL,IAAY,IAAhB,EAAsB;AAClB,+BAAkB,KAAKL,MAAvB,SAAgC,KAAKK,GAArC;AACH;AACJ;AAED;;;;;;AAIAC,EAAAA,WAAW,GAAW;AAClB,WAAO,KAAKN,MAAL,CAAYO,OAAZ,CAAoB,MAApB,EAA4B,GAA5B,CAAP;AACH;AAED;;;;;;AAIAC,EAAAA,cAAc,GAAW;AACrB,QAAIC,QAAQ,GAAG,KAAKH,WAAL,EAAf;AACA,QAAII,WAAW,GAAG,gBAAK,KAAKT,MAAL,CAAYU,QAAjB,EAA2BF,QAA3B,CAAlB;;AACA,QAAI,CAAC,oBAAWC,WAAX,CAAL,EAA8B;AAC1B,yBAAUA,WAAV;AACH;;AACD,WAAOA,WAAP;AACH;;AApGqB","sourcesContent":["// @flow\nimport FileDetails from \"./FileDetails.js\";\nimport {join} from \"path\";\nimport {existsSync, mkdirSync} from \"fs\";\n\n/**\n * Command-line arguments being passed to the indexer.\n */\nexport default class Args {\n    /**\n     * Project directory to output the index results.\n     */\n    output: FileDetails;\n    /**\n     * What type of indexing is taking place: crawl or sitemap?\n     */\n    type: string;\n    /**\n     * Should the html be saved?\n     */\n    html: boolean;\n    /**\n     * Should the headers be saved?\n     */\n    headers: boolean;\n    /**\n     * Domain being indexed.\n     */\n    domain: string;\n    /**\n     * URI of a single path you want to add to the index.\n     */\n    uri: ?string;\n    /**\n     * Should progress information be output to the console?\n     */\n    verbose: ?boolean;\n    /**\n     * Max number of urls to crawl.\n     */\n    limit: number;\n    /**\n     * Max number of screenshots to create.\n     */\n    screenshots: number;\n\n    constructor(params: any) {\n        this.type = \"crawl\";\n        this.verbose = true;\n        Object.assign(this, params);\n    }\n\n    /**\n     * If the mandatory options are not passed then show the menu.\n     * @returns {boolean} true if the mandatory options are not passed.\n     */\n    shouldShowHelp(): boolean {\n        return (\n            this.hasOwnProperty(\"help\") ||\n            (this.domain == null || this.output == null)\n        );\n    }\n\n    /**\n     * Is the indexing going to be a crawl?\n     * @returns {boolean} true if it is.\n     */\n    isCrawl(): boolean {\n        return this.type === \"crawl\";\n    }\n\n    /**\n     * Adds a single page to the index.\n     * @return {boolean}\n     */\n    isSingle(): boolean {\n        return this.type === \"single\";\n    }\n\n    /**\n     * Get the url for a single page crawl.\n     * @return {string} url.\n     */\n    getSingleUrl(): ?string {\n        if (this.uri != null) {\n            return `https://${this.domain}${this.uri}`;\n        }\n    }\n\n    /**\n     * Name of the site that is being crawled.\n     * @returns {string}\n     */\n    getSiteName(): string {\n        return this.domain.replace(/[.]/g, \"_\");\n    }\n\n    /**\n     * Get the project folder which the output + the site name. Also, it will be created if it doesn't exist.\n     * @returns {string} the project path.\n     */\n    getProjectPath(): string {\n        let siteName = this.getSiteName();\n        let projectPath = join(this.output.filename, siteName);\n        if (!existsSync(projectPath)) {\n            mkdirSync(projectPath);\n        }\n        return projectPath;\n    }\n}\n"],"file":"Args.js"}