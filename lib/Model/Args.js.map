{"version":3,"sources":["../../src/Model/Args.js"],"names":["Args","constructor","params","type","verbose","Object","assign","shouldShowHelp","hasOwnProperty","domain","output","isCrawl","isSingle","getSingleUrl","uri","getSiteName","replace","getProjectPath","siteName","projectPath","filename"],"mappings":"6FACA,kEACA,0BACA,sB,kFAEA;;GAGe,KAAMA,CAAAA,IAAK,CACtB;;OADsB,CAKtB;;OALsB,CAStB;;OATsB,CAatB;;OAbsB,CAiBtB;;OAjBsB,CAqBtB;;OArBsB,CAyBtB;;OAKAC,WAAW,CAACC,MAAD,CAAc,CACrB,KAAKC,IAAL,CAAY,OAAZ,CACA,KAAKC,OAAL,CAAe,IAAf,CACAC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAoBJ,MAApB,CACH,CAED;;;OAIAK,cAAc,EAAY,CACtB,MACI,MAAKC,cAAL,CAAoB,MAApB,GACC,KAAKC,MAAL,EAAe,IAAf,EAAuB,KAAKC,MAAL,EAAe,IAE9C,CAED;;;OAIAC,OAAO,EAAY,CACf,MAAO,MAAKR,IAAL,GAAc,OACxB,CAED;;;OAIAS,QAAQ,EAAY,CAChB,MAAO,MAAKT,IAAL,GAAc,QACxB,CAED;;;OAIAU,YAAY,EAAY,CACpB,GAAI,KAAKC,GAAL,EAAY,IAAhB,CAAsB,CAClB,wBAAkB,KAAKL,MAAvB,SAAgC,KAAKK,GAArC,CACH,CACJ,CAED;;;OAIAC,WAAW,EAAW,CAClB,MAAO,MAAKN,MAAL,CAAYO,OAAZ,CAAoB,MAApB,CAA4B,GAA5B,CACV,CAED;;;OAIAC,cAAc,EAAW,CACrB,GAAIC,CAAAA,QAAQ,CAAG,KAAKH,WAAL,EAAf,CACA,GAAII,CAAAA,WAAW,CAAG,eAAK,KAAKT,MAAL,CAAYU,QAAjB,CAA2BF,QAA3B,CAAlB,CACA,GAAI,CAAC,mBAAWC,WAAX,CAAL,CAA8B,CAC1B,kBAAUA,WAAV,CACH,CACD,MAAOA,CAAAA,WACV,CA5FqB,C","sourcesContent":["// @flow\nimport FileDetails from \"./FileDetails\";\nimport {join} from \"path\";\nimport {existsSync, mkdirSync} from \"fs\";\n\n/**\n * Command-line arguments being passed to the indexer.\n */\nexport default class Args {\n    /**\n     * Project directory to output the index results.\n     */\n    output: FileDetails;\n    /**\n     * What type of indexing is taking place: crawl or sitemap?\n     */\n    type: string;\n    /**\n     * Should the html be saved?\n     */\n    html: boolean;\n    /**\n     * Should the headers be saved?\n     */\n    headers: boolean;\n    /**\n     * Domain being indexed.\n     */\n    domain: string;\n    /**\n     * URI of a single path you want to add to the index.\n     */\n    uri: ?string;\n    /**\n     * Should progress information be output to the console?\n     */\n    verbose: ?boolean;\n\n    constructor(params: any) {\n        this.type = \"crawl\";\n        this.verbose = true;\n        Object.assign(this, params);\n    }\n\n    /**\n     * If the mandatory options are not passed then show the menu.\n     * @returns {boolean} true if the mandatory options are not passed.\n     */\n    shouldShowHelp(): boolean {\n        return (\n            this.hasOwnProperty(\"help\") ||\n            (this.domain == null || this.output == null)\n        );\n    }\n\n    /**\n     * Is the indexing going to be a crawl?\n     * @returns {boolean} true if it is.\n     */\n    isCrawl(): boolean {\n        return this.type === \"crawl\";\n    }\n\n    /**\n     * Adds a single page to the index.\n     * @return {boolean}\n     */\n    isSingle(): boolean {\n        return this.type === \"single\";\n    }\n\n    /**\n     * Get the url for a single page crawl.\n     * @return {string} url.\n     */\n    getSingleUrl(): ?string {\n        if (this.uri != null) {\n            return `https://${this.domain}${this.uri}`;\n        }\n    }\n\n    /**\n     * Name of the site that is being crawled.\n     * @returns {string}\n     */\n    getSiteName(): string {\n        return this.domain.replace(/[.]/g, \"_\");\n    }\n\n    /**\n     * Get the project folder which the output + the site name. Also, it will be created if it doesn't exist.\n     * @returns {string} the project path.\n     */\n    getProjectPath(): string {\n        let siteName = this.getSiteName();\n        let projectPath = join(this.output.filename, siteName);\n        if (!existsSync(projectPath)) {\n            mkdirSync(projectPath);\n        }\n        return projectPath;\n    }\n}\n"],"file":"Args.js"}