{"version":3,"sources":["../../src/Model/Args.js"],"names":["Args","constructor","params","type","verbose","Object","assign","shouldShowHelp","hasOwnProperty","domain","output","isCrawl","isSingle","getSingleUrl","uri","getSiteName","replace","getProjectPath","siteName","projectPath","filename"],"mappings":"6FACA,kEACA,0BACA,sB,kFAEA;;GAGe,KAAMA,CAAAA,IAAK,CACtB;;OADsB,CAKtB;;OALsB,CAStB;;OATsB,CAatB;;OAbsB,CAiBtB;;OAjBsB,CAqBtB;;OAKAC,WAAW,CAACC,MAAD,CAAc,CACrB,KAAKC,IAAL,CAAY,OAAZ,CACA,KAAKC,OAAL,CAAe,IAAf,CACAC,MAAM,CAACC,MAAP,CAAc,IAAd,CAAoBJ,MAApB,CACH,CAED;;;OAIAK,cAAc,EAAY,CACtB,MACI,MAAKC,cAAL,CAAoB,MAApB,GACC,KAAKC,MAAL,EAAe,IAAf,EAAuB,KAAKC,MAAL,EAAe,IAE9C,CAED;;;OAIAC,OAAO,EAAY,CACf,MAAO,MAAKR,IAAL,GAAc,OACxB,CAED;;;OAIAS,QAAQ,EAAY,CAChB,MAAO,MAAKT,IAAL,GAAc,QACxB,CAED;;;OAIAU,YAAY,EAAY,CACpB,GAAI,KAAKC,GAAL,EAAY,IAAhB,CAAsB,CAClB,wBAAkB,KAAKL,MAAvB,SAAgC,KAAKK,GAArC,CACH,CACJ,CAED;;;OAIAC,WAAW,EAAW,CAClB,MAAO,MAAKN,MAAL,CAAYO,OAAZ,CAAoB,MAApB,CAA4B,GAA5B,CACV,CAED;;;OAIAC,cAAc,EAAW,CACrB,GAAIC,CAAAA,QAAQ,CAAG,KAAKH,WAAL,EAAf,CACA,GAAII,CAAAA,WAAW,CAAG,eAAK,KAAKT,MAAL,CAAYU,QAAjB,CAA2BF,QAA3B,CAAlB,CACA,GAAI,CAAC,mBAAWC,WAAX,CAAL,CAA8B,CAC1B,kBAAUA,WAAV,CACH,CACD,MAAOA,CAAAA,WACV,CAxFqB,C","sourcesContent":["// @flow\r\nimport FileDetails from \"./FileDetails\";\r\nimport {join} from \"path\";\r\nimport {existsSync, mkdirSync} from \"fs\";\r\n\r\n/**\r\n * Command-line arguments being passed to the indexer.\r\n */\r\nexport default class Args {\r\n    /**\r\n     * Project directory to output the index results.\r\n     */\r\n    output: FileDetails;\r\n    /**\r\n     * What type of indexing is taking place: crawl or sitemap?\r\n     */\r\n    type: string;\r\n    /**\r\n     * Should the html be saved?\r\n     */\r\n    html: boolean;\r\n    /**\r\n     * Domain being indexed.\r\n     */\r\n    domain: string;\r\n    /**\r\n     * URI of a single path you want to add to the index.\r\n     */\r\n    uri: ?string;\r\n    /**\r\n     * Should progress information be output to the console?\r\n     */\r\n    verbose: ?boolean;\r\n\r\n    constructor(params: any) {\r\n        this.type = \"crawl\";\r\n        this.verbose = true;\r\n        Object.assign(this, params);\r\n    }\r\n\r\n    /**\r\n     * If the mandatory options are not passed then show the menu.\r\n     * @returns {boolean} true if the mandatory options are not passed.\r\n     */\r\n    shouldShowHelp(): boolean {\r\n        return (\r\n            this.hasOwnProperty(\"help\") ||\r\n            (this.domain == null || this.output == null)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Is the indexing going to be a crawl?\r\n     * @returns {boolean} true if it is.\r\n     */\r\n    isCrawl(): boolean {\r\n        return this.type === \"crawl\";\r\n    }\r\n\r\n    /**\r\n     * Adds a single page to the index.\r\n     * @return {boolean}\r\n     */\r\n    isSingle(): boolean {\r\n        return this.type === \"single\";\r\n    }\r\n\r\n    /**\r\n     * Get the url for a single page crawl.\r\n     * @return {string} url.\r\n     */\r\n    getSingleUrl(): ?string {\r\n        if (this.uri != null) {\r\n            return `https://${this.domain}${this.uri}`;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Name of the site that is being crawled.\r\n     * @returns {string}\r\n     */\r\n    getSiteName(): string {\r\n        return this.domain.replace(/[.]/g, \"_\");\r\n    }\r\n\r\n    /**\r\n     * Get the project folder which the output + the site name. Also, it will be created if it doesn't exist.\r\n     * @returns {string} the project path.\r\n     */\r\n    getProjectPath(): string {\r\n        let siteName = this.getSiteName();\r\n        let projectPath = join(this.output.filename, siteName);\r\n        if (!existsSync(projectPath)) {\r\n            mkdirSync(projectPath);\r\n        }\r\n        return projectPath;\r\n    }\r\n}\r\n"],"file":"Args.js"}