{"version":3,"sources":["../../src/Model/Args.js"],"names":["Args","constructor","params","type","verbose","Object","assign","shouldShowHelp","hasOwnProperty","domain","output","isCrawl","isSingle","getSingleUrl","uri","getSiteName","replace","getProjectPath","siteName","projectPath","filename"],"mappings":";;;;;;;AACA;;AACA;;AACA;;;;AAEA;;;AAGe,MAAMA,IAAN,CAAW;AACxB;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;;AAIA;;;AAIAC,EAAAA,WAAW,CAACC,MAAD,EAAc;AACvB,SAAKC,IAAL,GAAY,OAAZ;AACA,SAAKC,OAAL,GAAe,IAAf;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBJ,MAApB;AACD;AAED;;;;;;AAIAK,EAAAA,cAAc,GAAY;AACxB,WACE,KAAKC,cAAL,CAAoB,MAApB,KACC,KAAKC,MAAL,IAAe,IAAf,IAAuB,KAAKC,MAAL,IAAe,IAFzC;AAID;AAED;;;;;;AAIAC,EAAAA,OAAO,GAAY;AACjB,WAAO,KAAKR,IAAL,KAAc,OAArB;AACD;AAED;;;;;;AAIAS,EAAAA,QAAQ,GAAY;AAClB,WAAO,KAAKT,IAAL,KAAc,QAArB;AACD;AAED;;;;;;AAIAU,EAAAA,YAAY,GAAY;AACtB,QAAI,KAAKC,GAAL,IAAY,IAAhB,EAAsB;AACpB,aAAQ,WAAU,KAAKL,MAAO,GAAE,KAAKK,GAAI,EAAzC;AACD;AACF;AAED;;;;;;AAIAC,EAAAA,WAAW,GAAW;AACpB,WAAO,KAAKN,MAAL,CAAYO,OAAZ,CAAoB,MAApB,EAA4B,GAA5B,CAAP;AACD;AAED;;;;;;AAIAC,EAAAA,cAAc,GAAW;AACvB,QAAIC,QAAQ,GAAG,KAAKH,WAAL,EAAf;AACA,QAAII,WAAW,GAAG,gBAAK,KAAKT,MAAL,CAAYU,QAAjB,EAA2BF,QAA3B,CAAlB;;AACA,QAAI,CAAC,oBAAWC,WAAX,CAAL,EAA8B;AAC5B,yBAAUA,WAAV;AACD;;AACD,WAAOA,WAAP;AACD;;AAvFuB","sourcesContent":["// @flow\r\nimport FileDetails from \"./FileDetails\";\r\nimport { join } from \"path\";\r\nimport { existsSync, mkdirSync } from \"fs\";\r\n\r\n/**\r\n * Command-line arguments being passed to the indexer.\r\n */\r\nexport default class Args {\r\n  /**\r\n   * Project directory to output the index results.\r\n   */\r\n  output: FileDetails;\r\n  /**\r\n   * What type of indexing is taking place: crawl or sitemap?\r\n   */\r\n  type: string;\r\n  /**\r\n   * Should the html be saved?\r\n   */\r\n  html: boolean;\r\n  /**\r\n   * Domain being indexed.\r\n   */\r\n  domain: string;\r\n  /**\r\n   * URI of a single path you want to add to the index.\r\n   */\r\n  uri: ?string;\r\n  /**\r\n   * Should progress information be output to the console?\r\n   */\r\n  verbose: ?boolean;\r\n  constructor(params: any) {\r\n    this.type = \"crawl\";\r\n    this.verbose = true;\r\n    Object.assign(this, params);\r\n  }\r\n\r\n  /**\r\n   * If the mandatory options are not passed then show the menu.\r\n   * @returns {boolean} true if the mandatory options are not passed.\r\n   */\r\n  shouldShowHelp(): boolean {\r\n    return (\r\n      this.hasOwnProperty(\"help\") ||\r\n      (this.domain == null || this.output == null)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Is the indexing going to be a crawl?\r\n   * @returns {boolean} true if it is.\r\n   */\r\n  isCrawl(): boolean {\r\n    return this.type === \"crawl\";\r\n  }\r\n\r\n  /**\r\n   * Adds a single page to the index.\r\n   * @return {boolean}\r\n   */\r\n  isSingle(): boolean {\r\n    return this.type === \"single\";\r\n  }\r\n\r\n  /**\r\n   * Get the url for a single page crawl.\r\n   * @return {string} url.\r\n   */\r\n  getSingleUrl(): ?string {\r\n    if (this.uri != null) {\r\n      return `https://${this.domain}${this.uri}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Name of the site that is being crawled.\r\n   * @returns {string}\r\n   */\r\n  getSiteName(): string {\r\n    return this.domain.replace(/[.]/g, \"_\");\r\n  }\r\n\r\n  /**\r\n   * Get the project folder which the output + the site name. Also, it will be created if it doesn't exist.\r\n   * @returns {string} the project path.\r\n   */\r\n  getProjectPath(): string {\r\n    let siteName = this.getSiteName();\r\n    let projectPath = join(this.output.filename, siteName);\r\n    if (!existsSync(projectPath)) {\r\n      mkdirSync(projectPath);\r\n    }\r\n    return projectPath;\r\n  }\r\n}\r\n"],"file":"Args.js"}